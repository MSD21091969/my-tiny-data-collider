"""
Tool and chat message execution operation models.

This module contains request/response models for tool and chat message execution:
- ToolRequest, ToolResponse: Tool execution operations
- ChatRequest, ChatResponse: Chat message operations

For canonical session entities, see pydantic_models.canonical.tool_session and canonical.chat_session
"""

from pydantic import BaseModel, Field, computed_field, field_validator
from typing import Dict, Any, List, Optional, Literal

from ..base.envelopes import BaseRequest, BaseResponse
from ..canonical.chat_session import MessageType


# ============================================================================
# TOOL EXECUTION OPERATIONS
# ============================================================================

class ToolRequestPayload(BaseModel):
    """Payload for a tool execution request."""
    tool_name: str = Field(..., description="Name of the tool to execute")
    parameters: Dict[str, Any] = Field(default_factory=dict, description="Parameters for the tool")
    prompt: Optional[str] = Field(None, description="Optional prompt for AI-assisted tool execution")
    casefile_id: Optional[str] = Field(None, description="Optional casefile context")
    session_request_id: Optional[str] = Field(None, description="Client-provided session request ID for tracking")
    
    @field_validator('tool_name')
    @classmethod
    def validate_tool_exists(cls, v: str) -> str:
        """Validate tool is registered in MANAGED_TOOLS."""
        # Import here to avoid circular dependency
        from pydantic_ai_integration.tool_decorator import validate_tool_exists, get_tool_names
        
        if not validate_tool_exists(v):
            available = ', '.join(get_tool_names())
            raise ValueError(
                f"Tool '{v}' not registered. Available tools: {available}"
            )
        
        return v


class ToolResponsePayload(BaseModel):
    """Payload for a tool execution response."""
    result: Dict[str, Any] = Field(..., description="Result of the tool execution")
    events: List[Dict[str, Any]] = Field(default_factory=list, description="Events generated during execution")
    session_request_id: Optional[str] = Field(None, description="Client-provided session request ID for tracking")


class ToolRequest(BaseRequest[ToolRequestPayload]):
    """Request to execute a tool."""
    operation: Literal["tool_execution"] = "tool_execution"
    event_ids: List[str] = Field(default_factory=list, description="List of event IDs generated by this request")
    
    @computed_field
    def has_casefile_context(self) -> bool:
        """Whether this request has casefile context."""
        return self.payload.casefile_id is not None


class ToolResponse(BaseResponse[ToolResponsePayload]):
    """Response from a tool execution."""
    pass


# ============================================================================
# CHAT MESSAGE OPERATIONS
# ============================================================================

class ChatMessagePayload(BaseModel):
    """Canonical chat message structure (data entity, not request payload)."""
    content: str = Field(..., description="Message content")
    message_type: MessageType = Field(..., description="Type of message")
    tool_calls: List[Dict[str, Any]] = Field(default_factory=list, description="Tool calls in this message")
    session_request_id: Optional[str] = Field(None, description="Client-provided session request ID")
    casefile_id: Optional[str] = Field(None, description="Associated casefile ID")


class ChatRequestPayload(BaseModel):
    """Payload for chat message request (operation parameters)."""
    message: str = Field(..., description="User message content")
    session_id: str = Field(..., description="Chat session ID")
    casefile_id: Optional[str] = Field(None, description="Optional casefile context")
    session_request_id: Optional[str] = Field(None, description="Client-provided session request ID for tracking")


class ChatResultPayload(BaseModel):
    """Payload for chat message response (operation result)."""
    message: ChatMessagePayload = Field(..., description="Assistant's response message")
    related_messages: List[ChatMessagePayload] = Field(default_factory=list, description="Related messages in conversation")
    events: List[Dict[str, Any]] = Field(default_factory=list, description="Events generated during processing")


class ChatRequest(BaseRequest[ChatRequestPayload]):
    """Request to send a chat message."""
    operation: Literal["chat"] = "chat"


class ChatResponse(BaseResponse[ChatResultPayload]):
    """Response to a chat message."""
    pass
