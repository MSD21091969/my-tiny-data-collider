"""Auto-generated tests for: {{ tool.name }}

Generated from: config/tools/{{ tool.name }}.yaml
DO NOT EDIT THIS FILE MANUALLY - Changes will be overwritten

This test suite validates the generated tool's parameter constraints and execution.
"""
import pytest
from pydantic import ValidationError
from unittest.mock import AsyncMock, MagicMock
from src.pydantic_ai_integration.dependencies import MDSContext
from src.pydantic_ai_integration.tools.generated.{{ tool.name }} import {{ tool.name }}, {{ tool.name | capitalize | replace('_', '') }}Params


class TestParams{{ tool.name | capitalize | replace('_', '') }}:
    """Test parameter validation for {{ tool.name }}."""
    
    {% for param in tool.parameters %}
    {% if param.min_value is defined %}
    def test_{{ param.name }}_min_value_constraint(self):
        """Test that {{ param.name }} enforces minimum value."""
        with pytest.raises(ValidationError):
            {{ tool.name | capitalize | replace('_', '') }}Params(
                {% for p in tool.parameters %}
                {% if p.name == param.name %}
                {{ p.name }}={{ param.min_value - 1 }}{% if not loop.last or p.required %},{% endif %}
                {% elif p.required %}
                {{ p.name }}={{ p.example_value }},
                {% endif %}
                {% endfor %}
            )
    {% endif %}
    
    {% if param.max_value is defined %}
    def test_{{ param.name }}_max_value_constraint(self):
        """Test that {{ param.name }} enforces maximum value."""
        with pytest.raises(ValidationError):
            {{ tool.name | capitalize | replace('_', '') }}Params(
                {% for p in tool.parameters %}
                {% if p.name == param.name %}
                {{ p.name }}={{ param.max_value + 1 }}{% if not loop.last or p.required %},{% endif %}
                {% elif p.required %}
                {{ p.name }}={{ p.example_value }},
                {% endif %}
                {% endfor %}
            )
    {% endif %}
    
    {% if param.min_length is defined %}
    def test_{{ param.name }}_min_length_constraint(self):
        """Test that {{ param.name }} enforces minimum length."""
        with pytest.raises(ValidationError):
            {{ tool.name | capitalize | replace('_', '') }}Params(
                {% for p in tool.parameters %}
                {% if p.name == param.name %}
                {{ p.name }}="{{ 'x' * (param.min_length - 1) }}"{% if not loop.last or p.required %},{% endif %}
                {% elif p.required %}
                {{ p.name }}={{ p.example_value }},
                {% endif %}
                {% endfor %}
            )
    {% endif %}
    
    {% if param.max_length is defined %}
    def test_{{ param.name }}_max_length_constraint(self):
        """Test that {{ param.name }} enforces maximum length."""
        with pytest.raises(ValidationError):
            {{ tool.name | capitalize | replace('_', '') }}Params(
                {% for p in tool.parameters %}
                {% if p.name == param.name %}
                {{ p.name }}="{{ 'x' * (param.max_length + 1) }}"{% if not loop.last or p.required %},{% endif %}
                {% elif p.required %}
                {{ p.name }}={{ p.example_value }},
                {% endif %}
                {% endfor %}
            )
    {% endif %}
    {% endfor %}
    
    def test_valid_params(self):
        """Test that valid parameters are accepted."""
        params = {{ tool.name | capitalize | replace('_', '') }}Params(
            {% for param in tool.parameters %}
            {% if param.required %}
            {{ param.name }}={{ param.example_value }},
            {% endif %}
            {% endfor %}
        )
        assert params is not None


@pytest.mark.asyncio
class TestTool{{ tool.name | capitalize | replace('_', '') }}:
    """Test {{ tool.name }} execution."""
    
    {% if tool.has_examples %}
    {% for example in tool.processed_examples %}
    async def test_{{ example.name }}(self):
        """{{ example.description }}"""
        # Setup context
        ctx = MDSContext(
            user_id={{ example.context_user_id }},
            session_id={{ example.context_session_id }}
        )
        
        # Execute tool
        result = await {{ tool.name }}(
            ctx,
            {% for kwarg in example.input_kwargs_literal %}
            {{ kwarg.name }}={{ kwarg.value }},
            {% endfor %}
        )
        
        # Assert results
        assert result is not None
        {% if example.expected_output_literal %}
        # Check expected output fields
        expected = {{ example.expected_output_literal }}
        for key, value in expected.items():
            assert key in result, f"Expected key '{key}' not found in result"
            assert result[key] == value, f"Expected {key}={value}, got {result[key]}"
        {% endif %}
    
    {% endfor %}
    {% else %}
    async def test_successful_execution(self):
        """Test successful tool execution."""
        # Setup context
        ctx = MDSContext(
            user_id="test_user",
            session_id="test_session"
        )
        
        # Execute tool
        result = await {{ tool.name }}(
            ctx,
            {% for param in tool.parameters %}
            {% if param.required %}
            {{ param.name }}={{ param.example_value }},
            {% endif %}
            {% endfor %}
        )
        
        # Assert results
        assert result is not None
        assert result["status"] == "success"
        assert result["tool"] == "{{ tool.name }}"
    {% endif %}
    
    async def test_event_registration(self):
        """Test that tool registers audit event."""
        # Setup context
        ctx = MDSContext(
            user_id="test_user",
            session_id="test_session"
        )
        
        # Execute tool
        await {{ tool.name }}(
            ctx,
            {% for param in tool.parameters %}
            {% if param.required %}
            {{ param.name }}={{ param.example_value }},
            {% endif %}
            {% endfor %}
        )
        
        # Assert event was registered
        assert len(ctx.tool_events) > 0
        event = ctx.tool_events[-1]
        assert event.status == "success"

{% if tool.has_error_tests %}

@pytest.mark.asyncio
class TestTool{{ tool.name | capitalize | replace('_', '') }}Errors:
    """Test error scenarios for {{ tool.name }}."""
    
    {% for error in tool.processed_error_tests %}
    async def test_{{ error.name }}(self):
        """{{ error.description }}"""
        with pytest.raises({{ error.error_type }}):
            {{ tool.name | capitalize | replace('_', '') }}Params(
                {% for kwarg in error.input_kwargs_literal %}
                {{ kwarg.name }}={{ kwarg.value }},
                {% endfor %}
            )
    
    {% endfor %}
{% endif %}
