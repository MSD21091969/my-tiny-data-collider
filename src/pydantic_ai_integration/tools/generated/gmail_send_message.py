"""Auto-generated tool: gmail_send_message

Generated from: config/tools/gmail_send_message.yaml
DO NOT EDIT THIS FILE MANUALLY - Changes will be overwritten

This tool is part of the pydantic_ai_integration tool engineering foundation.
It was generated by the Tool Factory and automatically registered with MANAGED_TOOLS.
"""
from pydantic import BaseModel, Field
from typing import Dict, Any, Optional, List
from ...tool_decorator import register_mds_tool
from ...dependencies import MDSContext


class GmailsendmessageParams(BaseModel):
    """Parameters for gmail_send_message.
    
    Send an email message through Gmail
    """
    to: str = Field(
...,
        description="Recipient email address"
    )
    subject: str = Field(
...,
min_length=1,max_length=500,        description="Email subject line"
    )
    body: str = Field(
...,
min_length=1,        description="Email body content (plain text)"
    )
    cc: Optional[str] = Field(
'',
        description="CC recipient email addresses (comma-separated)"
    )
    bcc: Optional[str] = Field(
'',
        description="BCC recipient email addresses (comma-separated)"
    )

    class Config:
        json_schema_extra = {
            "examples": [
                {
                    "to": 'recipient@example.com',                    "subject": 'Test Email',                    "body": 'This is a test email',                    "cc": '',                    "bcc": ''                }
            ]
        }


@register_mds_tool(
    name="gmail_send_message",
    display_name="Gmail Send Message",
    description="Send an email message through Gmail",
    category="google_workspace",
    version="1.0.0",
    tags=['gmail', 'email', 'google_workspace', 'communication', 'send'],
    enabled=True,
    requires_auth=True,
    required_permissions=['gmail.send'],
    requires_casefile=True,
    timeout_seconds=30,
    params_model=GmailsendmessageParams,
    session_policies={'requires_active_session': True, 'allow_new_session': False, 'allow_session_resume': True, 'session_event_type': 'gmail_send', 'log_request_payload': True, 'log_full_response': True},
    casefile_policies={'requires_casefile': True, 'allowed_casefile_states': ['active'], 'create_if_missing': False, 'enforce_access_control': True, 'audit_casefile_changes': True},
    audit_config={'success_event': 'gmail_send_success', 'failure_event': 'gmail_send_failure', 'log_response_fields': ['message_id'], 'redact_fields': ['body'], 'emit_casefile_event': True},
)
async def gmail_send_message(
    ctx: MDSContext,
    to: str,    subject: str,    body: str,    cc: str = '',    bcc: str = '') -> Dict[str, Any]:
    """Send an email message through Gmail
    
    Args:
        ctx: MDSContext with user_id, session_id, etc.
        to: Recipient email address
        subject: Email subject line
        body: Email body content (plain text)
        cc: CC recipient email addresses (comma-separated)
        bcc: BCC recipient email addresses (comma-separated)
    
    Returns:
        Dict containing execution results
    """
    # Register event for audit trail
    event_id = ctx.register_event(
        "gmail_send_message",
        {
            "to": to,            "subject": subject,            "body": body,            "cc": cc,            "bcc": bcc        }
    )
    
    # API call implementation
    from src.pydantic_ai_integration.google_workspace.clients import GmailClient
    
    # Initialize client
    client = GmailClient(user_id=ctx.user_id)
    
    # Build request
    response = await client.send_message(
        to=to,        subject=subject,        body=body,        cc=cc,        bcc=bcc    )
    
    # Convert response to dict
    result = response.model_dump() if hasattr(response, 'model_dump') else response
    
    # Update audit trail
    if ctx.tool_events:
        last_event = ctx.tool_events[-1]
        last_event.result_summary = {
            "status": "success",
            "result_preview": str(result)[:100]
        }
        last_event.status = "success"
    
    return result