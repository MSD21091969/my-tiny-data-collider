"""Auto-generated tool: gmail_get_message

Generated from: config/tools/gmail_get_message.yaml
DO NOT EDIT THIS FILE MANUALLY - Changes will be overwritten

This tool is part of the pydantic_ai_integration tool engineering foundation.
It was generated by the Tool Factory and automatically registered with MANAGED_TOOLS.
"""
from pydantic import BaseModel, Field
from typing import Dict, Any, Optional, List
from ...tool_decorator import register_mds_tool
from ...dependencies import MDSContext


class GmailgetmessageParams(BaseModel):
    """Parameters for gmail_get_message.
    
    Get full details of a specific Gmail message by ID
    """
    message_id: str = Field(
...,
min_length=1,        description="Gmail message ID to retrieve"
    )
    format: Optional[str] = Field(
'full',
        description="Format of the message (full, metadata, minimal, raw)"
    )
    include_headers: Optional[bool] = Field(
True,
        description="Include email headers in the response"
    )

    class Config:
        json_schema_extra = {
            "examples": [
                {
                    "message_id": 'mock-msg-123',                    "format": 'full',                    "include_headers": True                }
            ]
        }


@register_mds_tool(
    name="gmail_get_message",
    display_name="Gmail Get Message",
    description="Get full details of a specific Gmail message by ID",
    category="google_workspace",
    version="1.0.0",
    tags=['gmail', 'email', 'google_workspace', 'retrieve'],
    enabled=True,
    requires_auth=True,
    required_permissions=['gmail.readonly'],
    requires_casefile=False,
    timeout_seconds=30,
    params_model=GmailgetmessageParams,
    session_policies={'requires_active_session': True, 'allow_new_session': False, 'allow_session_resume': True, 'session_event_type': 'gmail_get', 'log_request_payload': True, 'log_full_response': False},
    casefile_policies={'requires_casefile': False, 'allowed_casefile_states': ['active'], 'create_if_missing': False, 'enforce_access_control': True, 'audit_casefile_changes': False},
    audit_config={'success_event': 'gmail_get_success', 'failure_event': 'gmail_get_failure', 'log_response_fields': ['id', 'subject', 'sender'], 'redact_fields': ['body'], 'emit_casefile_event': True},
)
async def gmail_get_message(
    ctx: MDSContext,
    message_id: str,    format: str = 'full',    include_headers: bool = True) -> Dict[str, Any]:
    """Get full details of a specific Gmail message by ID
    
    Args:
        ctx: MDSContext with user_id, session_id, etc.
        message_id: Gmail message ID to retrieve
        format: Format of the message (full, metadata, minimal, raw)
        include_headers: Include email headers in the response
    
    Returns:
        Dict containing execution results
    """
    # Register event for audit trail
    event_id = ctx.register_event(
        "gmail_get_message",
        {
            "message_id": message_id,            "format": format,            "include_headers": include_headers        }
    )
    
    # API call implementation
    from src.pydantic_ai_integration.google_workspace.clients import GmailClient
    
    # Initialize client
    client = GmailClient(user_id=ctx.user_id)
    
    # Build request
    response = await client.get_message(
        message_id=message_id,        format=format,        include_headers=include_headers    )
    
    # Convert response to dict
    result = response.model_dump() if hasattr(response, 'model_dump') else response
    
    # Update audit trail
    if ctx.tool_events:
        last_event = ctx.tool_events[-1]
        last_event.result_summary = {
            "status": "success",
            "result_preview": str(result)[:100]
        }
        last_event.status = "success"
    
    return result