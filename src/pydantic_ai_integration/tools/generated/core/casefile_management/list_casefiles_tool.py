"""Auto-generated tool: list_casefiles_tool

Generated from: config/tools/core/casefile_management/list_casefiles_tool.yaml
DO NOT EDIT THIS FILE MANUALLY - Changes will be overwritten

This tool is part of the pydantic_ai_integration tool engineering foundation.
It was generated by the Tool Factory and automatically registered with MANAGED_TOOLS.
"""
from pydantic import BaseModel, Field
from typing import Dict, Any, Optional, List
from src.pydantic_ai_integration.tool_decorator import register_mds_tool
from src.pydantic_ai_integration.dependencies import MDSContext


class ListcasefilestoolParams(BaseModel):
    """Parameters for list_casefiles_tool.
    
    List casefiles with optional filters for owner, tags, and state
    """
    owner_user_id: Optional[str] = Field(None, description="Filter by owner user ID (defaults to current user)")
    tags: Optional[List[Any]] = Field(None, description="Filter by tags (returns casefiles with any of these tags)", max_length=10)
    state: Optional[str] = Field(None, description="Filter by casefile state")
    limit: Optional[int] = Field(20, description="Maximum number of results to return", ge=1, le=100)
    offset: Optional[int] = Field(0, description="Number of results to skip (for pagination)", ge=0)

    class Config:
        json_schema_extra = {
            "examples": [
                {
                    "owner_user_id": 'example',                    "tags": ['urgent'],                    "state": 'example',                    "limit": 10,                    "offset": 10                }
            ]
        }


@register_mds_tool(
    name="list_casefiles_tool",
    display_name="List Casefiles",
    description="List casefiles with optional filters for owner, tags, and state",
    category="workspace",
    version="1.0.0",
    tags=['casefile', 'crud', 'workspace', 'search', 'list'],
    enabled=True,
    requires_auth=True,
    required_permissions=['casefiles:read'],
    requires_casefile=False,
    timeout_seconds=30,
    params_model=ListcasefilestoolParams,
    session_policies={'requires_active_session': True, 'allow_new_session': False, 'allow_session_resume': True, 'session_event_type': 'request', 'log_request_payload': True, 'log_full_response': False},
    casefile_policies={'requires_casefile': False, 'allowed_casefile_states': ['active', 'archived'], 'create_if_missing': False, 'enforce_access_control': True, 'audit_casefile_changes': False},
    audit_config={'success_event': 'casefiles_listed', 'failure_event': 'casefiles_list_failed', 'log_response_fields': ['total_count', 'limit', 'offset'], 'redact_fields': [], 'emit_casefile_event': False},
)
async def list_casefiles_tool(
    ctx: MDSContext,
    owner_user_id: str = None,    tags: List[Any] = None,    state: str = None,    limit: int = 20,    offset: int = 0) -> Dict[str, Any]:
    """List casefiles with optional filters for owner, tags, and state
    
    Args:
        ctx: MDSContext with user_id, session_id, etc.
        owner_user_id: Filter by owner user ID (defaults to current user)
        tags: Filter by tags (returns casefiles with any of these tags)
        state: Filter by casefile state
        limit: Maximum number of results to return
        offset: Number of results to skip (for pagination)
    
    Returns:
        Dict containing execution results
    """
    # Register event for audit trail
    event_id = ctx.register_event(
        "list_casefiles_tool",
        {
            "owner_user_id": owner_user_id,            "tags": tags,            "state": state,            "limit": limit,            "offset": offset        }
    )
    
    # API call implementation - inherit DTOs from method definition
    # Import method's request/response models
    from src.casefileservice.service import CasefileService
    from src.pydantic_models.operations.casefile_ops import ListCasefilesRequest
    from src.pydantic_models.operations.casefile_ops import ListCasefilesResponse
    
    # Initialize service (dependency injection will provide actual instance)
    service = CasefileService()
    
    # Build request using method's DTO
    request = ListCasefilesRequest(
        user_id=ctx.user_id,
        session_id=ctx.session_id,
        context=ctx.model_dump(),
        payload={
            "owner_user_id": owner_user_id,            "tags": tags,            "state": state,            "limit": limit,            "offset": offset        }
    )
    response = await service.list_casefiles(request=request)
    
    # Extract result from response using method's DTO
    result = response.payload.model_dump() if hasattr(response.payload, 'model_dump') else response.payload
    
    
    
    # Update audit trail
    if ctx.tool_events:
        last_event = ctx.tool_events[-1]
        last_event.result_summary = {
            "status": "success",
            "result_preview": str(result)[:100]
        }
        last_event.status = "success"
    
    return result