"""Auto-generated tool: get_casefile_tool

Generated from: config/tools/core/casefile_management/get_casefile_tool.yaml
DO NOT EDIT THIS FILE MANUALLY - Changes will be overwritten

This tool is part of the pydantic_ai_integration tool engineering foundation.
It was generated by the Tool Factory and automatically registered with MANAGED_TOOLS.
"""
from pydantic import BaseModel, Field
from typing import Dict, Any, Optional, List
from src.pydantic_ai_integration.tool_decorator import register_mds_tool
from src.pydantic_ai_integration.dependencies import MDSContext


class GetcasefiletoolParams(BaseModel):
    """Parameters for get_casefile_tool.
    
    Retrieve a casefile by ID with full metadata and permissions
    """
    casefile_id: str = Field(..., description="Unique identifier of the casefile to retrieve", min_length=1)

    class Config:
        json_schema_extra = {
            "examples": [
                {
                    "casefile_id": 'cf_abc123'                }
            ]
        }


@register_mds_tool(
    name="get_casefile_tool",
    display_name="Get Casefile",
    description="Retrieve a casefile by ID with full metadata and permissions",
    category="workspace",
    version="1.0.0",
    tags=['casefile', 'crud', 'workspace', 'read'],
    enabled=True,
    requires_auth=True,
    required_permissions=['casefiles:read'],
    requires_casefile=True,
    timeout_seconds=30,
    params_model=GetcasefiletoolParams,
    session_policies={'requires_active_session': True, 'allow_new_session': False, 'allow_session_resume': True, 'session_event_type': 'request', 'log_request_payload': True, 'log_full_response': True},
    casefile_policies={'requires_casefile': True, 'allowed_casefile_states': ['active', 'archived'], 'create_if_missing': False, 'enforce_access_control': True, 'audit_casefile_changes': False},
    audit_config={'success_event': 'casefile_retrieved', 'failure_event': 'casefile_retrieval_failed', 'log_response_fields': ['casefile_id', 'title', 'owner_user_id'], 'redact_fields': [], 'emit_casefile_event': False},
)
async def get_casefile_tool(
    ctx: MDSContext,
    casefile_id: str) -> Dict[str, Any]:
    """Retrieve a casefile by ID with full metadata and permissions
    
    Args:
        ctx: MDSContext with user_id, session_id, etc.
        casefile_id: Unique identifier of the casefile to retrieve
    
    Returns:
        Dict containing execution results
    """
    # Register event for audit trail
    event_id = ctx.register_event(
        "get_casefile_tool",
        {
            "casefile_id": casefile_id        }
    )
    
    # API call implementation - inherit DTOs from method definition
    # Import method's request/response models
    from src.casefileservice.service import CasefileService
    from src.pydantic_models.operations.casefile_ops import GetCasefileRequest
    from src.pydantic_models.operations.casefile_ops import GetCasefileResponse
    
    # Initialize service (dependency injection will provide actual instance)
    service = CasefileService()
    
    # Build request using method's DTO
    request = GetCasefileRequest(
        user_id=ctx.user_id,
        session_id=ctx.session_id,
        context=ctx.model_dump(),
        payload={
            "casefile_id": casefile_id        }
    )
    response = await service.get_casefile(request=request)
    
    # Extract result from response using method's DTO
    result = response.payload.model_dump() if hasattr(response.payload, 'model_dump') else response.payload
    
    
    
    # Update audit trail
    if ctx.tool_events:
        last_event = ctx.tool_events[-1]
        last_event.result_summary = {
            "status": "success",
            "result_preview": str(result)[:100]
        }
        last_event.status = "success"
    
    return result