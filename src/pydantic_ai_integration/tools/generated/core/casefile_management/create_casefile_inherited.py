"""Auto-generated tool: create_casefile_inherited

Generated from: config/tools/core/casefile_management/create_casefile_inherited.yaml
DO NOT EDIT THIS FILE MANUALLY - Changes will be overwritten

This tool is part of the pydantic_ai_integration tool engineering foundation.
It was generated by the Tool Factory and automatically registered with MANAGED_TOOLS.
"""
from pydantic import BaseModel, Field
from typing import Dict, Any, Optional, List
from src.pydantic_ai_integration.tool_decorator import register_mds_tool
from src.pydantic_ai_integration.dependencies import MDSContext


class CreatecasefileinheritedParams(BaseModel):
    """Parameters for create_casefile_inherited.
    
    Create a new casefile using automatic DTO inheritance from method definition
    """
    title: str = Field(..., description="Casefile title")
    description: Optional[str] = Field('', description="Casefile description")
    tags: Optional[List[Any]] = Field(None, description="Tags for categorization")

    class Config:
        json_schema_extra = {
            "examples": [
                {
                    "title": 'Inherited Casefile Test',                    "description": '',                    "tags": []                }
            ]
        }


@register_mds_tool(
    name="create_casefile_inherited",
    display_name="Create Casefile (Inherited)",
    description="Create a new casefile using automatic DTO inheritance from method definition",
    category="workspace",
    version="1.0.0",
    tags=['casefile', 'inheritance', 'test'],
    enabled=True,
    requires_auth=True,
    required_permissions=['casefiles:write'],
    requires_casefile=False,
    timeout_seconds=30,
    params_model=CreatecasefileinheritedParams,
    session_policies={'requires_active_session': True, 'allow_new_session': False, 'allow_session_resume': True, 'session_event_type': 'request', 'log_request_payload': True, 'log_full_response': True},
    casefile_policies={'requires_casefile': False, 'allowed_casefile_states': ['active'], 'create_if_missing': False, 'enforce_access_control': True, 'audit_casefile_changes': True},
    audit_config={'success_event': 'casefile_created_inherited', 'failure_event': 'casefile_creation_inherited_failed', 'log_response_fields': ['casefile_id', 'title', 'owner_user_id', 'inheritance_test'], 'redact_fields': [], 'emit_casefile_event': True},
)
async def create_casefile_inherited(
    ctx: MDSContext,
    title: str,    description: str = '',    tags: List[Any] = None) -> Dict[str, Any]:
    """Create a new casefile using automatic DTO inheritance from method definition
    
    Args:
        ctx: MDSContext with user_id, session_id, etc.
        title: Casefile title
        description: Casefile description
        tags: Tags for categorization
    
    Returns:
        Dict containing execution results
    """
    # Register event for audit trail
    event_id = ctx.register_event(
        "create_casefile_inherited",
        {
            "title": title,            "description": description,            "tags": tags        }
    )
    
    # API call implementation - inherit DTOs from method definition
    # Import method's request/response models
    from src.casefileservice.service import CasefileService
    from src.casefileservice.models import CreateCasefileRequest
    from src.casefileservice.models import CreateCasefileResponse
    
    # Initialize service (dependency injection will provide actual instance)
    service = CasefileService()
    
    # Build request using method's DTO
    request = CreateCasefileRequest(
        user_id=ctx.user_id,
        session_id=ctx.session_id,
        context=ctx.model_dump(),
        payload={
            "title": title,            "description": description,            "tags": tags        }
    )
    response = await service.create_casefile(request=request)
    
    # Extract result from response using method's DTO
    result = response.payload.model_dump() if hasattr(response.payload, 'model_dump') else response.payload
    
    
    
    # Update audit trail
    if ctx.tool_events:
        last_event = ctx.tool_events[-1]
        last_event.result_summary = {
            "status": "success",
            "result_preview": str(result)[:100]
        }
        last_event.status = "success"
    
    return result