"""Auto-generated tool: gmail_list_messages

Generated from: config/tools/gmail_list_messages.yaml
DO NOT EDIT THIS FILE MANUALLY - Changes will be overwritten

This tool is part of the pydantic_ai_integration tool engineering foundation.
It was generated by the Tool Factory and automatically registered with MANAGED_TOOLS.
"""
from pydantic import BaseModel, Field
from typing import Dict, Any, Optional, List
from ...tool_decorator import register_mds_tool
from ...dependencies import MDSContext


class GmaillistmessagesParams(BaseModel):
    """Parameters for gmail_list_messages.
    
    List Gmail messages for the authenticated user with optional filtering
    """
    max_results: Optional[int] = Field(
10,
ge=1,le=100,        description="Maximum number of messages to return"
    )
    query: Optional[str] = Field(
'',
        description="Gmail search query string (e.g. 'is:unread', 'from:example@gmail.com')"
    )
    label_ids: Optional[List[Any]] = Field(
[],
        description="List of label IDs to filter by (e.g. ['INBOX', 'UNREAD'])"
    )

    class Config:
        json_schema_extra = {
            "examples": [
                {
                    "max_results": 5,                    "query": '',                    "label_ids": ['INBOX']                }
            ]
        }


@register_mds_tool(
    name="gmail_list_messages",
    display_name="Gmail List Messages",
    description="List Gmail messages for the authenticated user with optional filtering",
    category="google_workspace",
    version="1.0.0",
    tags=['gmail', 'email', 'google_workspace', 'communication'],
    enabled=True,
    requires_auth=True,
    required_permissions=['gmail.readonly'],
    requires_casefile=False,
    timeout_seconds=30,
    params_model=GmaillistmessagesParams,
    session_policies={'requires_active_session': True, 'allow_new_session': False, 'allow_session_resume': True, 'session_event_type': 'gmail_list', 'log_request_payload': True, 'log_full_response': False},
    casefile_policies={'requires_casefile': False, 'allowed_casefile_states': ['active'], 'create_if_missing': False, 'enforce_access_control': True, 'audit_casefile_changes': False},
    audit_config={'success_event': 'gmail_list_success', 'failure_event': 'gmail_list_failure', 'log_response_fields': ['result_size_estimate'], 'redact_fields': [], 'emit_casefile_event': True},
)
async def gmail_list_messages(
    ctx: MDSContext,
    max_results: int = 10,    query: str = '',    label_ids: List[Any] = []) -> Dict[str, Any]:
    """List Gmail messages for the authenticated user with optional filtering
    
    Args:
        ctx: MDSContext with user_id, session_id, etc.
        max_results: Maximum number of messages to return
        query: Gmail search query string (e.g. 'is:unread', 'from:example@gmail.com')
        label_ids: List of label IDs to filter by (e.g. ['INBOX', 'UNREAD'])
    
    Returns:
        Dict containing execution results
    """
    # Register event for audit trail
    event_id = ctx.register_event(
        "gmail_list_messages",
        {
            "max_results": max_results,            "query": query,            "label_ids": label_ids        }
    )
    
    # API call implementation
    from src.pydantic_ai_integration.google_workspace.clients import GmailClient
    
    # Initialize client
    client = GmailClient(user_id=ctx.user_id)
    
    # Build request
    response = await client.list_messages(
        max_results=max_results,        query=query,        label_ids=label_ids    )
    
    # Convert response to dict
    result = response.model_dump() if hasattr(response, 'model_dump') else response
    
    # Update audit trail
    if ctx.tool_events:
        last_event = ctx.tool_events[-1]
        last_event.result_summary = {
            "status": "success",
            "result_preview": str(result)[:100]
        }
        last_event.status = "success"
    
    return result