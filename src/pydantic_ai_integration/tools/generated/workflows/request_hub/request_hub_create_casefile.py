"""Auto-generated tool: request_hub_create_casefile

Generated from: config/tools/workflows/request_hub/create_casefile_request_hub.yaml
DO NOT EDIT THIS FILE MANUALLY - Changes will be overwritten

TEMPLATE STATUS: âœ… UP TO DATE (Last sync: October 8, 2025 - Foundation Sync)

This tool is part of the pydantic_ai_integration tool engineering foundation.
It was generated by the Tool Factory and automatically registered with MANAGED_TOOLS.
"""

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field

from src.pydantic_ai_integration.dependencies import MDSContext
from src.pydantic_ai_integration.tool_decorator import register_mds_tool


class RequesthubcreatecasefileParams(BaseModel):
    """Parameters for request_hub_create_casefile.

    Create a casefile through RequestHub with hook execution and policy defaults.
    """

    title: str = Field(..., description="Primary title for the casefile.")
    description: Optional[str] = Field(
        "", description="Optional descriptive text for the casefile."
    )
    tags: Optional[List[Any]] = Field([], description="Labels applied to the new casefile.")
    hook_channels: Optional[List[Any]] = Field(
        ["metrics", "audit"], description="Additional hook identifiers to activate."
    )

    class Config:
        json_schema_extra = {
            "examples": [
                {
                    "title": "example",
                    "description": "",
                    "tags": [],
                    "hook_channels": ["metrics", "audit"],
                }
            ]
        }


@register_mds_tool(
    name="request_hub_create_casefile",
    params_model=RequesthubcreatecasefileParams,
    description="Create a casefile through RequestHub with hook execution and policy defaults.",
    category="workspace",
    version="0.1.0",
    tags=["request-hub", "casefile", "hooks"],
    method_name="execute_casefile",
)
async def request_hub_create_casefile(
    ctx: MDSContext,
    title: str,
    description: str = "",
    tags: List[Any] = [],
    hook_channels: List[Any] = ["metrics", "audit"],
) -> Dict[str, Any]:
    """Create a casefile through RequestHub with hook execution and policy defaults.

    Args:
        ctx: MDSContext with user_id, session_id, etc.
        title: Primary title for the casefile.
        description: Optional descriptive text for the casefile.
        tags: Labels applied to the new casefile.
        hook_channels: Additional hook identifiers to activate.

    Returns:
        Dict containing execution results
    """
    # Register event for audit trail
    event_id = ctx.register_event(
        "request_hub_create_casefile",
        {"title": title, "description": description, "tags": tags, "hook_channels": hook_channels},
    )

    # API call implementation - inherit DTOs from method definition
    # Import method's service class
    from src.requesthubservice import RequestHubService

    # Initialize service (dependency injection will provide actual instance)
    service = RequestHubService()

    # Build request using method's DTO
    # Direct method call without request envelope
    response = await service.execute_casefile(
        title=title, description=description, tags=tags, hook_channels=hook_channels
    )

    # Extract result from response using method's DTO
    result = response.model_dump() if hasattr(response, "model_dump") else response

    # Update audit trail
    if ctx.tool_events:
        last_event = ctx.tool_events[-1]
        last_event.result_summary = {"status": "success", "result_preview": str(result)[:100]}
        last_event.status = "success"

    return result
