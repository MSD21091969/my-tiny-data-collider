"""Auto-generated tool: request_hub_create_casefile_with_session

Generated from: config/tools/workflows/request_hub/create_casefile_with_session_request_hub.yaml
DO NOT EDIT THIS FILE MANUALLY - Changes will be overwritten

TEMPLATE STATUS: âœ… UP TO DATE (Last sync: October 8, 2025 - Foundation Sync)

This tool is part of the pydantic_ai_integration tool engineering foundation.
It was generated by the Tool Factory and automatically registered with MANAGED_TOOLS.
"""
from pydantic import BaseModel, Field
from typing import Dict, Any, Optional, List
from ....tool_decorator import register_mds_tool
from ....dependencies import MDSContext


class RequesthubcreatecasefilewithsessionParams(BaseModel):
    """Parameters for request_hub_create_casefile_with_session.
    
    Composite RequestHub workflow that creates a casefile and optionally boots a tool session with hook telemetry.
    """
    title: str = Field(..., description="Primary title for the new casefile.")
    description: Optional[str] = Field('', description="Optional textual description for the casefile.")
    tags: Optional[List[Any]] = Field([], description="Casefile tags used for categorization.")
    auto_start_session: Optional[bool] = Field(True, description="Whether to automatically start a tool session after casefile creation.")
    session_title: Optional[str] = Field('', description="Optional explicit title for the session when auto starting.")
    hook_channels: Optional[List[Any]] = Field(['metrics', 'audit'], description="Hook identifiers to activate during workflow execution.")

    class Config:
        json_schema_extra = {
            "examples": [
                {
                    "title": 'Composite Workflow',                    "description": '',                    "tags": [],                    "auto_start_session": True,                    "session_title": '',                    "hook_channels": ['metrics', 'audit']                }
            ]
        }


@register_mds_tool(
    name="request_hub_create_casefile_with_session",
    params_model=RequesthubcreatecasefilewithsessionParams,
    description="Composite RequestHub workflow that creates a casefile and optionally boots a tool session with hook telemetry.",
    category="workspace",
    version="0.1.0",
    tags=['request-hub', 'casefile', 'tool-session', 'composite'],
    method_name="execute_casefile_with_session",
)
async def request_hub_create_casefile_with_session(
    ctx: MDSContext,
    title: str,    description: str = '',    tags: List[Any] = [],    auto_start_session: bool = True,    session_title: str = '',    hook_channels: List[Any] = ['metrics', 'audit']) -> Dict[str, Any]:
    """Composite RequestHub workflow that creates a casefile and optionally boots a tool session with hook telemetry.
    
    Args:
        ctx: MDSContext with user_id, session_id, etc.
        title: Primary title for the new casefile.
        description: Optional textual description for the casefile.
        tags: Casefile tags used for categorization.
        auto_start_session: Whether to automatically start a tool session after casefile creation.
        session_title: Optional explicit title for the session when auto starting.
        hook_channels: Hook identifiers to activate during workflow execution.
    
    Returns:
        Dict containing execution results
    """
    # Register event for audit trail
    event_id = ctx.register_event(
        "request_hub_create_casefile_with_session",
        {
            "title": title,            "description": description,            "tags": tags,            "auto_start_session": auto_start_session,            "session_title": session_title,            "hook_channels": hook_channels        }
    )
    
    # API call implementation - inherit DTOs from method definition
    # Import method's service class
    from src.requesthubservice import RequestHubService
    
    # Initialize service (dependency injection will provide actual instance)
    service = RequestHubService()
    
    # Build request using method's DTO
    request = CreateCasefileWithSessionRequest(
        user_id=ctx.user_id,
        session_id=ctx.session_id,
        context=ctx.model_dump(),
        payload={
            "title": title,            "description": description,            "tags": tags,            "auto_start_session": auto_start_session,            "session_title": session_title,            "hook_channels": hook_channels        }
    )
    response = await service.execute_casefile_with_session(request=request)
    
    #Extract result from response using method's DTO
    result = response.payload.model_dump() if hasattr(response.payload, 'model_dump') else response.payload
    
    
    
    # Update audit trail
    if ctx.tool_events:
        last_event = ctx.tool_events[-1]
        last_event.result_summary = {
            "status": "success",
            "result_preview": str(result)[:100]
        }
        last_event.status = "success"
    
    return result