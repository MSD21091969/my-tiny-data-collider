"""Auto-generated tool: gmail_search_messages

Generated from: config/tools/gmail_search_messages.yaml
DO NOT EDIT THIS FILE MANUALLY - Changes will be overwritten

This tool is part of the pydantic_ai_integration tool engineering foundation.
It was generated by the Tool Factory and automatically registered with MANAGED_TOOLS.
"""
from pydantic import BaseModel, Field
from typing import Dict, Any, Optional, List
from ...tool_decorator import register_mds_tool
from ...dependencies import MDSContext


class GmailsearchmessagesParams(BaseModel):
    """Parameters for gmail_search_messages.
    
    Search Gmail messages using advanced query syntax
    """
    query: str = Field(
...,
min_length=1,        description="Gmail search query (e.g. 'from:user@example.com after:2024/01/01')"
    )
    max_results: Optional[int] = Field(
20,
ge=1,le=100,        description="Maximum number of results to return"
    )
    include_spam_trash: Optional[bool] = Field(
False,
        description="Include messages from SPAM and TRASH"
    )

    class Config:
        json_schema_extra = {
            "examples": [
                {
                    "query": 'from:notifications@example.com is:unread',                    "max_results": 10,                    "include_spam_trash": False                }
            ]
        }


@register_mds_tool(
    name="gmail_search_messages",
    display_name="Gmail Search Messages",
    description="Search Gmail messages using advanced query syntax",
    category="google_workspace",
    version="1.0.0",
    tags=['gmail', 'email', 'google_workspace', 'search'],
    enabled=True,
    requires_auth=True,
    required_permissions=['gmail.readonly'],
    requires_casefile=False,
    timeout_seconds=30,
    params_model=GmailsearchmessagesParams,
    session_policies={'requires_active_session': True, 'allow_new_session': False, 'allow_session_resume': True, 'session_event_type': 'gmail_search', 'log_request_payload': True, 'log_full_response': False},
    casefile_policies={'requires_casefile': False, 'allowed_casefile_states': ['active'], 'create_if_missing': False, 'enforce_access_control': True, 'audit_casefile_changes': False},
    audit_config={'success_event': 'gmail_search_success', 'failure_event': 'gmail_search_failure', 'log_response_fields': ['result_size_estimate', 'query_used'], 'redact_fields': [], 'emit_casefile_event': True},
)
async def gmail_search_messages(
    ctx: MDSContext,
    query: str,    max_results: int = 20,    include_spam_trash: bool = False) -> Dict[str, Any]:
    """Search Gmail messages using advanced query syntax
    
    Args:
        ctx: MDSContext with user_id, session_id, etc.
        query: Gmail search query (e.g. 'from:user@example.com after:2024/01/01')
        max_results: Maximum number of results to return
        include_spam_trash: Include messages from SPAM and TRASH
    
    Returns:
        Dict containing execution results
    """
    # Register event for audit trail
    event_id = ctx.register_event(
        "gmail_search_messages",
        {
            "query": query,            "max_results": max_results,            "include_spam_trash": include_spam_trash        }
    )
    
    # API call implementation
    from src.pydantic_ai_integration.google_workspace.clients import GmailClient
    
    # Initialize client
    client = GmailClient(user_id=ctx.user_id)
    
    # Build request
    response = await client.search_messages(
        query=query,        max_results=max_results,        include_spam_trash=include_spam_trash    )
    
    # Convert response to dict
    result = response.model_dump() if hasattr(response, 'model_dump') else response
    
    
    # Update audit trail
    if ctx.tool_events:
        last_event = ctx.tool_events[-1]
        last_event.result_summary = {
            "status": "success",
            "result_preview": str(result)[:100]
        }
        last_event.status = "success"
    
    return result