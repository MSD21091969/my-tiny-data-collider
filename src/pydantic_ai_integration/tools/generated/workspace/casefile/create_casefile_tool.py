"""Auto-generated tool: create_casefile_tool

Generated from: config/tools/workspace/casefile/create_casefile_tool.yaml
DO NOT EDIT THIS FILE MANUALLY - Changes will be overwritten

This tool is part of the pydantic_ai_integration tool engineering foundation.
It was generated by the Tool Factory and automatically registered with MANAGED_TOOLS.
"""
from pydantic import BaseModel, Field
from typing import Dict, Any, Optional, List
from src.pydantic_ai_integration.tool_decorator import register_mds_tool
from src.pydantic_ai_integration.dependencies import MDSContext


class CreatecasefiletoolParams(BaseModel):
    """Parameters for create_casefile_tool.
    
    Create a new casefile with metadata, description, and optional tags
    """
    title: str = Field(
...,
min_length=1,max_length=200,        description="Title of the casefile"
    )
    description: Optional[str] = Field(
None,
max_length=5000,        description="Detailed description of the casefile purpose and context"
    )
    tags: Optional[List[Any]] = Field(
None,
max_length=20,        description="Optional tags for categorization and search"
    )
    metadata: Optional[Dict[str, Any]] = Field(
None,
        description="Optional additional metadata as key-value pairs"
    )

    class Config:
        json_schema_extra = {
            "examples": [
                {
                    "title": 'Support Case #12345',                    "description": 'Root cause analysis for October service outage',                    "tags": ['urgent', 'incident', 'q3-2025'],                    "metadata": {'priority': 'high', 'team': 'engineering'}                }
            ]
        }


@register_mds_tool(
    name="create_casefile_tool",
    display_name="Create Casefile",
    description="Create a new casefile with metadata, description, and optional tags",
    category="workspace",
    version="1.0.0",
    tags=['casefile', 'crud', 'workspace'],
    enabled=True,
    requires_auth=True,
    required_permissions=['casefiles:write'],
    requires_casefile=False,
    timeout_seconds=30,
    params_model=CreatecasefiletoolParams,
    session_policies={'requires_active_session': True, 'allow_new_session': False, 'allow_session_resume': True, 'session_event_type': 'request', 'log_request_payload': True, 'log_full_response': True},
    casefile_policies={'requires_casefile': False, 'allowed_casefile_states': ['active'], 'create_if_missing': False, 'enforce_access_control': True, 'audit_casefile_changes': True},
    audit_config={'success_event': 'casefile_created', 'failure_event': 'casefile_creation_failed', 'log_response_fields': ['casefile_id', 'title', 'owner_user_id'], 'redact_fields': [], 'emit_casefile_event': True},
)
async def create_casefile_tool(
    ctx: MDSContext,
    title: str,    description: str = None,    tags: List[Any] = None,    metadata: Dict[str, Any] = None) -> Dict[str, Any]:
    """Create a new casefile with metadata, description, and optional tags
    
    Args:
        ctx: MDSContext with user_id, session_id, etc.
        title: Title of the casefile
        description: Detailed description of the casefile purpose and context
        tags: Optional tags for categorization and search
        metadata: Optional additional metadata as key-value pairs
    
    Returns:
        Dict containing execution results
    """
    # Register event for audit trail
    event_id = ctx.register_event(
        "create_casefile_tool",
        {
            "title": title,            "description": description,            "tags": tags,            "metadata": metadata        }
    )
    
    # API call implementation
    from src.casefileservice.service import CasefileService
    from src.pydantic_models.operations.casefile_ops import CreateCasefileRequest
    
    # Initialize service/client (no parameters - services use dependency injection)
    service = CasefileService()
    
    # Build request with BaseRequest envelope fields
    request = CreateCasefileRequest(
        user_id=ctx.user_id,
        session_id=ctx.session_id,
        context=ctx.model_dump(),
        payload={
            "title": title,            "description": description,            "tags": tags,            "metadata": metadata        }
    )
    response = await service.create_casefile(request=request)
    
    # Extract payload from BaseResponse envelope
    result = response.payload.model_dump() if hasattr(response.payload, 'model_dump') else response.payload
    
    
    # Update audit trail
    if ctx.tool_events:
        last_event = ctx.tool_events[-1]
        last_event.result_summary = {
            "status": "success",
            "result_preview": str(result)[:100]
        }
        last_event.status = "success"
    
    return result