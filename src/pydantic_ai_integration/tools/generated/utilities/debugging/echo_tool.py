"""Auto-generated tool: echo_tool

Generated from: config/tools/echo_tool.yaml
DO NOT EDIT THIS FILE MANUALLY - Changes will be overwritten

This tool is part of the pydantic_ai_integration tool engineering foundation.
It was generated by the Tool Factory and automatically registered with MANAGED_TOOLS.
"""
from pydantic import BaseModel, Field
from typing import Dict, Any, Optional, List
from ...tool_decorator import register_mds_tool
from ...dependencies import MDSContext


class EchotoolParams(BaseModel):
    """Parameters for echo_tool.
    
    Echoes input message back with metadata
    """
    message: str = Field(
...,
min_length=1,max_length=500,        description="Message to echo back"
    )
    repeat_count: Optional[int] = Field(
1,
ge=1,le=10,        description="Number of times to repeat the message"
    )

    class Config:
        json_schema_extra = {
            "examples": [
                {
                    "message": 'hello',                    "repeat_count": 1                }
            ]
        }


@register_mds_tool(
    name="echo_tool",
    display_name="Echo Tool",
    description="Echoes input message back with metadata",
    category="examples",
    version="1.0.0",
    tags=['example', 'testing', 'echo', 'debugging', 'internal'],
    enabled=True,
    requires_auth=True,
    required_permissions=['tools:execute'],
    requires_casefile=False,
    timeout_seconds=10,
    params_model=EchotoolParams,
    session_policies={'requires_active_session': True, 'allow_new_session': False, 'allow_session_resume': True, 'session_event_type': 'request', 'log_request_payload': True, 'log_full_response': True},
    casefile_policies={'requires_casefile': False, 'allowed_casefile_states': ['active'], 'create_if_missing': False, 'enforce_access_control': True, 'audit_casefile_changes': True},
    audit_config={'success_event': 'tool_success', 'failure_event': 'tool_failure', 'log_response_fields': ['original_message', 'repeat_count', 'total_length'], 'redact_fields': [], 'emit_casefile_event': False},
)
async def echo_tool(
    ctx: MDSContext,
    message: str,    repeat_count: int = 1) -> Dict[str, Any]:
    """Echoes input message back with metadata
    
    Args:
        ctx: MDSContext with user_id, session_id, etc.
        message: Message to echo back
        repeat_count: Number of times to repeat the message
    
    Returns:
        Dict containing execution results
    """
    # Register event for audit trail
    event_id = ctx.register_event(
        "echo_tool",
        {
            "message": message,            "repeat_count": repeat_count        }
    )
    
    # Simple implementation
    echoed_messages = [message for _ in range(repeat_count)]
    total_length = sum(len(msg) for msg in echoed_messages)
    result = {
      "original_message": message,
      "repeat_count": repeat_count,
      "echoed_messages": echoed_messages,
      "total_length": total_length,
    }

    
    
    # Update audit trail
    if ctx.tool_events:
        last_event = ctx.tool_events[-1]
        last_event.result_summary = {
            "status": "success",
            "result_preview": str(result)[:100]
        }
        last_event.status = "success"
    
    return result