"""Auto-generated tests for: sheets_batch_get

Generated from: config/tools/sheets_batch_get.yaml
DO NOT EDIT THIS FILE MANUALLY - Changes will be overwritten

This test suite validates the generated tool's parameter constraints and execution.
"""
import pytest
from pydantic import ValidationError
from unittest.mock import AsyncMock, MagicMock
from src.pydantic_ai_integration.dependencies import MDSContext
from src.pydantic_ai_integration.tools.generated.sheets_batch_get import sheets_batch_get, SheetsbatchgetParams


class TestParamsSheetsbatchget:
    """Test parameter validation for sheets_batch_get."""
    
    
    
    def test_spreadsheet_id_min_length_constraint(self):
        """Test that spreadsheet_id enforces minimum length."""
        with pytest.raises(ValidationError):
            SheetsbatchgetParams(
                spreadsheet_id="",                ranges=['Sheet1!A1:B2', 'Sheet1!C3:D4'],
            )
    
    
    
    
    
    def test_valid_params(self):
        """Test that valid parameters are accepted."""
        params = SheetsbatchgetParams(
            spreadsheet_id='1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms',
            ranges=['Sheet1!A1:B2', 'Sheet1!C3:D4'],
        )
        assert params is not None


@pytest.mark.asyncio
class TestToolSheetsbatchget:
    """Test sheets_batch_get execution."""
    
    async def test_get_data_from_multiple_ranges(self):
        """Get data from multiple ranges"""
        # Setup context
        ctx = MDSContext(
            user_id='test_user',
            session_id='test_session'
        )
        
        # Execute tool
        result = await sheets_batch_get(
            ctx,
            spreadsheet_id='1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms',
            ranges=['Sheet1!A1:B2', 'Sheet1!C3:D4'],
        )
        
        # Assert results
        assert result is not None
        # Check expected output fields
        expected = {'spreadsheet': {'spreadsheet_id': '1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms', 'title': 'Mock Spreadsheet'}}
        for key, value in expected.items():
            assert key in result, f"Expected key '{key}' not found in result"
            assert result[key] == value, f"Expected {key}={value}, got {result[key]}"
    
    
    async def test_event_registration(self):
        """Test that tool registers audit event."""
        # Setup context
        ctx = MDSContext(
            user_id="test_user",
            session_id="test_session"
        )
        
        # Execute tool
        await sheets_batch_get(
            ctx,
            spreadsheet_id='1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms',
            ranges=['Sheet1!A1:B2', 'Sheet1!C3:D4'],
        )
        
        # Assert event was registered
        assert len(ctx.tool_events) > 0
        event = ctx.tool_events[-1]
        assert event.status == "success"


@pytest.mark.asyncio
class TestToolSheetsbatchgetErrors:
    """Test error scenarios for sheets_batch_get."""
    
    async def test_missing_spreadsheet_id(self):
        """Missing spreadsheet_id"""
        with pytest.raises(ValidationError):
            SheetsbatchgetParams(
                spreadsheet_id='',
                ranges=['Sheet1!A1:B2'],
            )
    
    async def test_empty_ranges_list(self):
        """Empty ranges list"""
        with pytest.raises(ValidationError):
            SheetsbatchgetParams(
                spreadsheet_id='test_id',
                ranges=[],
            )
    
