"""Auto-generated tests for: multi_echo_pipeline

Generated from: config/tools/multi_echo_pipeline.yaml
DO NOT EDIT THIS FILE MANUALLY - Changes will be overwritten

This test suite validates the generated tool's parameter constraints and execution.
"""
import pytest
from pydantic import ValidationError
from unittest.mock import AsyncMock, MagicMock
from src.pydantic_ai_integration.dependencies import MDSContext
from src.pydantic_ai_integration.tools.generated.multi_echo_pipeline import multi_echo_pipeline, MultiechopipelineParams


class TestParamsMultiechopipeline:
    """Test parameter validation for multi_echo_pipeline."""
    
    
    
    def test_initial_message_min_length_constraint(self):
        """Test that initial_message enforces minimum length."""
        with pytest.raises(ValidationError):
            MultiechopipelineParams(
                initial_message="",            )
    
    def test_repeat_count_min_value_constraint(self):
        """Test that repeat_count enforces minimum value."""
        with pytest.raises(ValidationError):
            MultiechopipelineParams(
                initial_message='Hello World',
                repeat_count=0,            )
    
    def test_repeat_count_max_value_constraint(self):
        """Test that repeat_count enforces maximum value."""
        with pytest.raises(ValidationError):
            MultiechopipelineParams(
                initial_message='Hello World',
                repeat_count=11,            )
    
    
    
    
    
    
    def test_valid_params(self):
        """Test that valid parameters are accepted."""
        params = MultiechopipelineParams(
            initial_message='Hello World',
        )
        assert params is not None


@pytest.mark.asyncio
class TestToolMultiechopipeline:
    """Test multi_echo_pipeline execution."""
    
    async def test_simple_three_step_echo_pipeline(self):
        """Simple three-step echo pipeline"""
        # Setup context
        ctx = MDSContext(
            user_id='user_test123',
            session_id='session_test456'
        )
        
        # Execute tool
        result = await multi_echo_pipeline(
            ctx,
            initial_message='Hello World',
            repeat_count=3,
            uppercase=False,
        )
        
        # Assert results
        assert result is not None
        # Check expected output fields
        expected = {'success': True, 'steps_executed': 3, 'final_result': 'Final: Step 2: Hello World'}
        for key, value in expected.items():
            assert key in result, f"Expected key '{key}' not found in result"
            assert result[key] == value, f"Expected {key}={value}, got {result[key]}"
    
    async def test_pipeline_with_uppercase_transformation(self):
        """Pipeline with uppercase transformation"""
        # Setup context
        ctx = MDSContext(
            user_id='user_test789',
            session_id='session_test012'
        )
        
        # Execute tool
        result = await multi_echo_pipeline(
            ctx,
            initial_message='test message',
            repeat_count=5,
            uppercase=True,
        )
        
        # Assert results
        assert result is not None
        # Check expected output fields
        expected = {'success': True, 'steps_executed': 3, 'final_result': 'FINAL: STEP 2: TEST MESSAGE'}
        for key, value in expected.items():
            assert key in result, f"Expected key '{key}' not found in result"
            assert result[key] == value, f"Expected {key}={value}, got {result[key]}"
    
    
    async def test_event_registration(self):
        """Test that tool registers audit event."""
        # Setup context
        ctx = MDSContext(
            user_id="test_user",
            session_id="test_session"
        )
        
        # Execute tool
        await multi_echo_pipeline(
            ctx,
            initial_message='Hello World',
        )
        
        # Assert event was registered
        assert len(ctx.tool_events) > 0
        event = ctx.tool_events[-1]
        assert event.status == "success"

