"""Auto-generated tests for: gmail_to_drive_pipeline

Generated from: config/tools/gmail_to_drive_pipeline.yaml
DO NOT EDIT THIS FILE MANUALLY - Changes will be overwritten

This test suite validates the generated tool's parameter constraints and execution.
"""
import pytest
from pydantic import ValidationError
from unittest.mock import AsyncMock, MagicMock
from src.pydantic_ai_integration.dependencies import MDSContext
from src.pydantic_ai_integration.tools.generated.gmail_to_drive_pipeline import gmail_to_drive_pipeline, GmailtodrivepipelineParams


class TestParamsGmailtodrivepipeline:
    """Test parameter validation for gmail_to_drive_pipeline."""
    
    
    
    def test_gmail_query_min_length_constraint(self):
        """Test that gmail_query enforces minimum length."""
        with pytest.raises(ValidationError):
            GmailtodrivepipelineParams(
                gmail_query="",                drive_folder_id='1abc_invoices_folder',
            )
    
    def test_max_messages_min_value_constraint(self):
        """Test that max_messages enforces minimum value."""
        with pytest.raises(ValidationError):
            GmailtodrivepipelineParams(
                gmail_query='from:vendor@example.com subject:invoice has:attachment',
                max_messages=0,                drive_folder_id='1abc_invoices_folder',
            )
    
    def test_max_messages_max_value_constraint(self):
        """Test that max_messages enforces maximum value."""
        with pytest.raises(ValidationError):
            GmailtodrivepipelineParams(
                gmail_query='from:vendor@example.com subject:invoice has:attachment',
                max_messages=101,                drive_folder_id='1abc_invoices_folder',
            )
    
    
    
    
    def test_drive_folder_id_min_length_constraint(self):
        """Test that drive_folder_id enforces minimum length."""
        with pytest.raises(ValidationError):
            GmailtodrivepipelineParams(
                gmail_query='from:vendor@example.com subject:invoice has:attachment',
                drive_folder_id="",            )
    
    
    def test_valid_params(self):
        """Test that valid parameters are accepted."""
        params = GmailtodrivepipelineParams(
            gmail_query='from:vendor@example.com subject:invoice has:attachment',
            drive_folder_id='1abc_invoices_folder',
        )
        assert params is not None


@pytest.mark.asyncio
class TestToolGmailtodrivepipeline:
    """Test gmail_to_drive_pipeline execution."""
    
    async def test_export_invoices_from_gmail_to_drive(self):
        """Export invoices from Gmail to Drive"""
        # Setup context
        ctx = MDSContext(
            user_id='user_abc123',
            session_id='session_xyz789'
        )
        
        # Execute tool
        result = await gmail_to_drive_pipeline(
            ctx,
            gmail_query='from:vendor@example.com subject:invoice has:attachment',
            max_messages=20,
            drive_folder_id='1abc_invoices_folder',
        )
        
        # Assert results
        assert result is not None
        # Check expected output fields
        expected = {'success': True, 'messages_found': 15, 'messages_processed': 15, 'files_uploaded': 23}
        for key, value in expected.items():
            assert key in result, f"Expected key '{key}' not found in result"
            assert result[key] == value, f"Expected {key}={value}, got {result[key]}"
    
    async def test_backup_important_emails_with_attachments(self):
        """Backup important emails with attachments"""
        # Setup context
        ctx = MDSContext(
            user_id='user_def456',
            session_id='session_uvw123'
        )
        
        # Execute tool
        result = await gmail_to_drive_pipeline(
            ctx,
            gmail_query='is:important has:attachment after:2025/01/01',
            max_messages=50,
            drive_folder_id='1xyz_backup_folder',
        )
        
        # Assert results
        assert result is not None
        # Check expected output fields
        expected = {'success': True, 'messages_found': 42, 'messages_processed': 42, 'files_uploaded': 87}
        for key, value in expected.items():
            assert key in result, f"Expected key '{key}' not found in result"
            assert result[key] == value, f"Expected {key}={value}, got {result[key]}"
    
    
    async def test_event_registration(self):
        """Test that tool registers audit event."""
        # Setup context
        ctx = MDSContext(
            user_id="test_user",
            session_id="test_session"
        )
        
        # Execute tool
        await gmail_to_drive_pipeline(
            ctx,
            gmail_query='from:vendor@example.com subject:invoice has:attachment',
            drive_folder_id='1abc_invoices_folder',
        )
        
        # Assert event was registered
        assert len(ctx.tool_events) > 0
        event = ctx.tool_events[-1]
        assert event.status == "success"

