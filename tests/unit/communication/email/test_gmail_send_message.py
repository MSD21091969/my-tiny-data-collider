"""Auto-generated tests for: gmail_send_message

Generated from: config/tools/gmail_send_message.yaml
DO NOT EDIT THIS FILE MANUALLY - Changes will be overwritten

This test suite validates the generated tool's parameter constraints and execution.
"""
import pytest
from pydantic import ValidationError
from unittest.mock import AsyncMock, MagicMock
from src.pydantic_ai_integration.dependencies import MDSContext
from src.pydantic_ai_integration.tools.generated.gmail_send_message import gmail_send_message, GmailsendmessageParams


class TestParamsGmailsendmessage:
    """Test parameter validation for gmail_send_message."""
    
    
    
    
    
    
    def test_subject_min_length_constraint(self):
        """Test that subject enforces minimum length."""
        with pytest.raises(ValidationError):
            GmailsendmessageParams(
                to='recipient@example.com',
                subject="",                body='This is a test email',
            )
    
    def test_subject_max_length_constraint(self):
        """Test that subject enforces maximum length."""
        with pytest.raises(ValidationError):
            GmailsendmessageParams(
                to='recipient@example.com',
                subject="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",                body='This is a test email',
            )
    
    
    def test_body_min_length_constraint(self):
        """Test that body enforces minimum length."""
        with pytest.raises(ValidationError):
            GmailsendmessageParams(
                to='recipient@example.com',
                subject='Test Email',
                body="",            )
    
    
    
    
    
    
    
    
    def test_valid_params(self):
        """Test that valid parameters are accepted."""
        params = GmailsendmessageParams(
            to='recipient@example.com',
            subject='Test Email',
            body='This is a test email',
        )
        assert params is not None


@pytest.mark.asyncio
class TestToolGmailsendmessage:
    """Test gmail_send_message execution."""
    
    async def test_send_a_basic_email(self):
        """Send a basic email"""
        # Setup context
        ctx = MDSContext(
            user_id='test_user',
            session_id='test_session'
        )
        
        # Execute tool
        result = await gmail_send_message(
            ctx,
            to='recipient@example.com',
            subject='Test Email',
            body='This is a test email',
        )
        
        # Assert results
        assert result is not None
        # Check expected output fields
        expected = {'message_id': 'mock-sent-123', 'thread_id': 'mock-thread-456'}
        for key, value in expected.items():
            assert key in result, f"Expected key '{key}' not found in result"
            assert result[key] == value, f"Expected {key}={value}, got {result[key]}"
    
    
    async def test_event_registration(self):
        """Test that tool registers audit event."""
        # Setup context
        ctx = MDSContext(
            user_id="test_user",
            session_id="test_session"
        )
        
        # Execute tool
        await gmail_send_message(
            ctx,
            to='recipient@example.com',
            subject='Test Email',
            body='This is a test email',
        )
        
        # Assert event was registered
        assert len(ctx.tool_events) > 0
        event = ctx.tool_events[-1]
        assert event.status == "success"


@pytest.mark.asyncio
class TestToolGmailsendmessageErrors:
    """Test error scenarios for gmail_send_message."""
    
    async def test_missing_required_field(self):
        """Missing required field"""
        with pytest.raises(ValidationError):
            GmailsendmessageParams(
                to='recipient@example.com',
                subject='Test Email',
                body='Missing subject',
            )
    
