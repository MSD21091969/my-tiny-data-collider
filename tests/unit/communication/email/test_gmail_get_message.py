"""Auto-generated tests for: gmail_get_message

Generated from: config/tools/gmail_get_message.yaml
DO NOT EDIT THIS FILE MANUALLY - Changes will be overwritten

This test suite validates the generated tool's parameter constraints and execution.
"""
import pytest
from pydantic import ValidationError
from unittest.mock import AsyncMock, MagicMock
from src.pydantic_ai_integration.dependencies import MDSContext
from src.pydantic_ai_integration.tools.generated.gmail_get_message import gmail_get_message, GmailgetmessageParams


class TestParamsGmailgetmessage:
    """Test parameter validation for gmail_get_message."""
    
    
    
    def test_message_id_min_length_constraint(self):
        """Test that message_id enforces minimum length."""
        with pytest.raises(ValidationError):
            GmailgetmessageParams(
                message_id="",            )
    
    
    
    
    
    
    
    
    def test_valid_params(self):
        """Test that valid parameters are accepted."""
        params = GmailgetmessageParams(
            message_id='mock-msg-123',
        )
        assert params is not None


@pytest.mark.asyncio
class TestToolGmailgetmessage:
    """Test gmail_get_message execution."""
    
    async def test_get_message_with_full_details(self):
        """Get message with full details"""
        # Setup context
        ctx = MDSContext(
            user_id='test_user',
            session_id='test_session'
        )
        
        # Execute tool
        result = await gmail_get_message(
            ctx,
            message_id='mock-msg-123',
            format='full',
            include_headers=True,
        )
        
        # Assert results
        assert result is not None
        # Check expected output fields
        expected = {'message': {'id': 'mock-msg-123', 'subject': 'Test Subject', 'sender': 'sender@example.com'}, 'id': 'mock-msg-123', 'subject': 'Test Subject'}
        for key, value in expected.items():
            assert key in result, f"Expected key '{key}' not found in result"
            assert result[key] == value, f"Expected {key}={value}, got {result[key]}"
    
    
    async def test_event_registration(self):
        """Test that tool registers audit event."""
        # Setup context
        ctx = MDSContext(
            user_id="test_user",
            session_id="test_session"
        )
        
        # Execute tool
        await gmail_get_message(
            ctx,
            message_id='mock-msg-123',
        )
        
        # Assert event was registered
        assert len(ctx.tool_events) > 0
        event = ctx.tool_events[-1]
        assert event.status == "success"


@pytest.mark.asyncio
class TestToolGmailgetmessageErrors:
    """Test error scenarios for gmail_get_message."""
    
    async def test_message_not_found(self):
        """Message not found"""
        with pytest.raises(ValueError):
            GmailgetmessageParams(
                message_id='nonexistent-id',
                format='full',
                include_headers=True,
            )
    
