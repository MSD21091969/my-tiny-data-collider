"""Auto-generated integration tests for: gmail_get_message

Generated from: config/tools/gmail_get_message.yaml
DO NOT EDIT THIS FILE MANUALLY - Changes will be overwritten

Integration tests validate the service layer, policy enforcement, and full request/response flow.
"""
import pytest
from uuid import uuid4
from src.tool_sessionservice.service import ToolSessionService
from src.pydantic_models.tool_session import ToolRequest, ToolRequestPayload, ToolResponse
from src.pydantic_models.shared.base_models import RequestStatus


@pytest.fixture
async def service():
    """Create a ToolSessionService instance."""
    return ToolSessionService()


@pytest.fixture
async def test_session(service):
    """Create a test session for integration tests."""
    result = await service.create_session(user_id="integration_test_user")
    return result["session_id"]


@pytest.mark.asyncio
class TestIntegrationGmailgetmessage:
    """Integration tests for gmail_get_message through service layer."""
    
    async def test_service_layer_execution(self, service, test_session):
        """Test tool execution through ToolSessionService.process_tool_request()."""
        # Construct ToolRequest
        request = ToolRequest(
            user_id="integration_test_user",
            session_id=test_session,
            payload=ToolRequestPayload(
                tool_name="gmail_get_message",
                parameters={
                    "message_id": 'mock-msg-123',
                }
            )
        )
        
        # Execute through service layer
        response = await service.process_tool_request(request)
        
        # Assertions
        assert response is not None
        assert isinstance(response, ToolResponse)
        assert response.status == RequestStatus.COMPLETED
        assert response.payload is not None
        assert response.payload.result is not None
    
    async def test_parameter_validation_at_service_layer(self, service, test_session):
        """Test that invalid parameters are caught by service layer."""
        # Construct request with invalid parameters
        request = ToolRequest(
            user_id="integration_test_user",
            session_id=test_session,
            payload=ToolRequestPayload(
                tool_name="gmail_get_message",
                parameters={
                    "message_id": 12345,  # Wrong type - should be string
                }
            )
        )
        
        # Execute and expect validation error
        with pytest.raises(ValueError, match="Invalid parameters"):
            await service.process_tool_request(request)
    
    async def test_missing_required_parameters(self, service, test_session):
        """Test that missing required parameters are detected."""
        # Construct request missing required parameters
        request = ToolRequest(
            user_id="integration_test_user",
            session_id=test_session,
            payload=ToolRequestPayload(
                tool_name="gmail_get_message",
                parameters={}  # Empty parameters
            )
        )
        
        # Execute
        with pytest.raises(ValueError, match="Invalid parameters"):
            await service.process_tool_request(request)
    
    async def test_session_validation(self, service):
        """Test that invalid session ID is rejected."""
        # Construct request with non-existent session
        request = ToolRequest(
            user_id="integration_test_user",
            session_id="nonexistent_session_id",
            payload=ToolRequestPayload(
                tool_name="gmail_get_message",
                parameters={
                    "message_id": 'mock-msg-123',
                }
            )
        )
        
        # Execute and expect error
        with pytest.raises(ValueError, match="Session.*not found"):
            await service.process_tool_request(request)
    
    async def test_response_structure(self, service, test_session):
        """Test that response has correct structure."""
        request = ToolRequest(
            user_id="integration_test_user",
            session_id=test_session,
            payload=ToolRequestPayload(
                tool_name="gmail_get_message",
                parameters={
                    "message_id": 'mock-msg-123',
                }
            )
        )
        
        response = await service.process_tool_request(request)
        
        # Validate response structure
        assert hasattr(response, "request_id")
        assert hasattr(response, "status")
        assert hasattr(response, "payload")
        assert hasattr(response, "timestamp")
        assert hasattr(response.payload, "result")
        assert response.request_id is not None
        assert response.status == RequestStatus.COMPLETED
    
    async def test_scenario_get_minimal_format(self, service, test_session):
        """Get message with minimal format"""
        request = ToolRequest(
            user_id="integration_test_user",
            session_id=test_session,
            payload=ToolRequestPayload(
                tool_name="gmail_get_message",
                parameters={
                    "message_id": mock-msg-456,
                    "format": minimal,
                    "include_headers": False,
                }
            )
        )
        
        response = await service.process_tool_request(request)
        
        # Check expected results
        assert response.status == RequestStatus.COMPLETED
        assert "id" in response.payload.result
        assert response.payload.result["id"] == mock-msg-456


@pytest.mark.asyncio
class TestIntegrationGmailgetmessagePolicies:
    """Test policy enforcement for gmail_get_message at service layer."""
    
    async def test_audit_trail_created(self, service, test_session):
        """Test that audit events are properly recorded."""
        request = ToolRequest(
            user_id="integration_test_user",
            session_id=test_session,
            payload=ToolRequestPayload(
                tool_name="gmail_get_message",
                parameters={
                    "message_id": 'mock-msg-123',
                }
            )
        )
        
        # Execute
        response = await service.process_tool_request(request)
        
        # Verify audit trail exists in response
        assert response is not None
        # Note: Full audit trail validation would require checking Firestore
        # This is a smoke test that execution completes
        assert response.status == RequestStatus.COMPLETED
    
