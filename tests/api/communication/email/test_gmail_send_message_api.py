"""Auto-generated API tests for: gmail_send_message

Generated from: config/tools/gmail_send_message.yaml
DO NOT EDIT THIS FILE MANUALLY - Changes will be overwritten

API tests validate the HTTP layer, JWT authentication, and end-to-end request/response flow.
"""
import pytest
from fastapi.testclient import TestClient
from src.pydantic_api.app import app
from src.authservice.token import create_token


@pytest.fixture
def client():
    """Create a FastAPI test client."""
    return TestClient(app)


@pytest.fixture
def auth_token():
    """Generate a valid JWT token for testing."""
    return create_token(user_id="api_test_user", username="API Test User")


@pytest.fixture
def auth_headers(auth_token):
    """Generate authorization headers with JWT token."""
    return {"Authorization": f"Bearer {auth_token}"}


@pytest.fixture
async def test_session(client, auth_headers):
    """Create a test session via API."""
    # First create a casefile
    casefile_response = client.post(
        "/casefiles/",
        json={
            "title": "API Test Casefile",
            "description": "Test casefile for API tests"
        },
        headers=auth_headers
    )
    assert casefile_response.status_code == 201
    casefile_id = casefile_response.json()["id"]
    
    # Then create a session
    session_response = client.post(
        f"/tool-sessions/?casefile_id={casefile_id}",
        headers=auth_headers
    )
    assert session_response.status_code == 200
    return session_response.json()["session_id"]


@pytest.mark.api
class TestAPIGmailsendmessage:
    """API tests for gmail_send_message through HTTP endpoints."""
    
    def test_tool_execution_via_api(self, client, auth_headers, test_session):
        """Test tool execution through POST /tool-sessions/{session_id}/execute."""
        # Construct request payload
        request_data = {
            "user_id": "api_test_user",
            "session_id": test_session,
            "payload": {
                "tool_name": "gmail_send_message",
                "parameters": {
                    "to": 'recipient@example.com',
                    "subject": 'Test Email',
                    "body": 'This is a test email',
                }
            }
        }
        
        # Execute via API
        response = client.post(
            f"/tool-sessions/{test_session}/execute",
            json=request_data,
            headers=auth_headers
        )
        
        # Assertions
        assert response.status_code == 200
        data = response.json()
        assert "request_id" in data
        assert "status" in data
        assert data["status"] == "completed"
        assert "payload" in data
        assert "result" in data["payload"]
    
    def test_tool_execution_without_auth(self, client, test_session):
        """Test that tool execution requires authentication."""
        request_data = {
            "user_id": "api_test_user",
            "session_id": test_session,
            "payload": {
                "tool_name": "gmail_send_message",
                "parameters": {
                    "to": 'recipient@example.com',
                    "subject": 'Test Email',
                    "body": 'This is a test email',
                }
            }
        }
        
        # Execute without authorization header
        response = client.post(
            f"/tool-sessions/{test_session}/execute",
            json=request_data
        )
        
        # Should reject with 401 or 403
        assert response.status_code in [401, 403]
    
    def test_tool_execution_with_invalid_token(self, client, test_session):
        """Test that invalid JWT tokens are rejected."""
        request_data = {
            "user_id": "api_test_user",
            "session_id": test_session,
            "payload": {
                "tool_name": "gmail_send_message",
                "parameters": {
                    "to": 'recipient@example.com',
                    "subject": 'Test Email',
                    "body": 'This is a test email',
                }
            }
        }
        
        # Execute with invalid token
        response = client.post(
            f"/tool-sessions/{test_session}/execute",
            json=request_data,
            headers={"Authorization": "Bearer invalid_token_here"}
        )
        
        # Should reject with 401
        assert response.status_code == 401
    
    def test_parameter_validation_via_api(self, client, auth_headers, test_session):
        """Test that invalid parameters are caught at API layer."""
        request_data = {
            "user_id": "api_test_user",
            "session_id": test_session,
            "payload": {
                "tool_name": "gmail_send_message",
                "parameters": {
                    "to": 12345,  # Wrong type - should be string
                    "subject": 12345,  # Wrong type - should be string
                    "body": 12345,  # Wrong type - should be string
                }
            }
        }
        
        # Execute via API
        response = client.post(
            f"/tool-sessions/{test_session}/execute",
            json=request_data,
            headers=auth_headers
        )
        
        # Should return 404 or 500 with error details
        assert response.status_code in [404, 500]
        assert "detail" in response.json()
    
    def test_missing_required_parameters_via_api(self, client, auth_headers, test_session):
        """Test that missing required parameters are caught."""
        request_data = {
            "user_id": "api_test_user",
            "session_id": test_session,
            "payload": {
                "tool_name": "gmail_send_message",
                "parameters": {}  # Empty parameters
            }
        }
        
        # Execute via API
        response = client.post(
            f"/tool-sessions/{test_session}/execute",
            json=request_data,
            headers=auth_headers
        )
        
        # Should return error
        assert response.status_code in [404, 422, 500]
    
    def test_invalid_session_via_api(self, client, auth_headers):
        """Test that invalid session ID is rejected."""
        request_data = {
            "user_id": "api_test_user",
            "session_id": "nonexistent_session",
            "payload": {
                "tool_name": "gmail_send_message",
                "parameters": {
                    "to": 'recipient@example.com',
                    "subject": 'Test Email',
                    "body": 'This is a test email',
                }
            }
        }
        
        # Execute via API
        response = client.post(
            "/tool-sessions/nonexistent_session/execute",
            json=request_data,
            headers=auth_headers
        )
        
        # Should return 404
        assert response.status_code == 404
    
    def test_response_structure_via_api(self, client, auth_headers, test_session):
        """Test that API response has correct structure."""
        request_data = {
            "user_id": "api_test_user",
            "session_id": test_session,
            "payload": {
                "tool_name": "gmail_send_message",
                "parameters": {
                    "to": 'recipient@example.com',
                    "subject": 'Test Email',
                    "body": 'This is a test email',
                }
            }
        }
        
        # Execute via API
        response = client.post(
            f"/tool-sessions/{test_session}/execute",
            json=request_data,
            headers=auth_headers
        )
        
        # Validate response structure
        assert response.status_code == 200
        data = response.json()
        assert "request_id" in data
        assert "status" in data
        assert "payload" in data
        assert "timestamp" in data
        assert data["request_id"] is not None
        assert data["status"] == "completed"
    
    def test_get_session_via_api(self, client, auth_headers, test_session):
        """Test GET /tool-sessions/{session_id} endpoint."""
        response = client.get(
            f"/tool-sessions/{test_session}",
            headers=auth_headers
        )
        
        assert response.status_code == 200
        data = response.json()
        assert "session_id" in data
        assert "user_id" in data
        assert data["session_id"] == test_session
        assert data["user_id"] == "api_test_user"
    
    def test_list_sessions_via_api(self, client, auth_headers):
        """Test GET /tool-sessions/ endpoint."""
        response = client.get(
            "/tool-sessions/",
            headers=auth_headers
        )
        
        assert response.status_code == 200
        data = response.json()
        assert isinstance(data, list)


@pytest.mark.api
class TestAPIGmailsendmessageToolRegistry:
    """Test tool registry endpoints for gmail_send_message."""
    
    def test_tool_listed_in_registry(self, client):
        """Test that gmail_send_message appears in /tools/ endpoint."""
        response = client.get("/tools/")
        
        assert response.status_code == 200
        tools = response.json()
        assert isinstance(tools, list)
        
        # Check if our tool is in the list
        tool_names = [tool["name"] for tool in tools]
        assert "gmail_send_message" in tool_names
    
    def test_get_tool_definition(self, client):
        """Test GET /tools/{tool_name} endpoint."""
        response = client.get("/tools/gmail_send_message")
        
        assert response.status_code == 200
        tool_def = response.json()
        assert tool_def["name"] == "gmail_send_message"
        assert "description" in tool_def
        assert "parameters" in tool_def
        assert "category" in tool_def