"""Auto-generated tests for: echo_chain_demo

Generated from: config/tools/echo_chain_demo.yaml
DO NOT EDIT THIS FILE MANUALLY - Changes will be overwritten

This test suite validates the generated tool's parameter constraints and execution.
"""
import pytest
from unittest.mock import AsyncMock, MagicMock
from src.pydantic_ai_integration.dependencies import MDSContext
from src.pydantic_ai_integration.tools.generated.echo_chain_demo import echo_chain_demo, EchochaindemoParams


class TestParamsEchochaindemo:
    """Test parameter validation for echo_chain_demo."""
    
    
    
    def test_initial_message_min_length_constraint(self):
        """Test that initial_message enforces minimum length."""
        with pytest.raises(ValidationError):
            EchochaindemoParams(
                initial_message="",            )
    
    
    def test_valid_params(self):
        """Test that valid parameters are accepted."""
        params = EchochaindemoParams(
            initial_message='Hello from composite tool',
        )
        assert params is not None


@pytest.mark.asyncio
class TestToolEchochaindemo:
    """Test echo_chain_demo execution."""
    
    async def test_basic_chain_execution(self):
        """Basic chain execution"""
        # Setup context
        ctx = MDSContext(
            user_id='user_123',
            session_id='session_456'
        )
        
        # Execute tool
        result = await echo_chain_demo(
            ctx,
            initial_message='Hello from composite tool',
        )
        
        # Assert results
        assert result is not None
        # Check expected output fields
        expected = {'tool': 'echo_chain_demo', 'status': 'success', 'steps_executed': 3}
        for key, value in expected.items():
            assert key in result, f"Expected key '{key}' not found in result"
            assert result[key] == value, f"Expected {key}={value}, got {result[key]}"
    
    
    async def test_event_registration(self):
        """Test that tool registers audit event."""
        # Setup context
        ctx = MDSContext(
            user_id="test_user",
            session_id="test_session"
        )
        
        # Execute tool
        await echo_chain_demo(
            ctx,
            initial_message='Hello from composite tool',
        )
        
        # Assert event was registered
        assert len(ctx.tool_events) > 0
        event = ctx.tool_events[-1]
        assert event.status == "success"

