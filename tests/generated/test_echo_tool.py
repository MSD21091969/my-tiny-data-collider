"""Auto-generated tests for: echo_tool

Generated from: config/tools/echo_tool.yaml
DO NOT EDIT THIS FILE MANUALLY - Changes will be overwritten

This test suite validates the generated tool's parameter constraints and execution.
"""
import pytest
from pydantic import ValidationError
from unittest.mock import AsyncMock, MagicMock
from src.pydantic_ai_integration.dependencies import MDSContext
from src.pydantic_ai_integration.tools.generated.echo_tool import echo_tool, EchotoolParams


class TestParamsEchotool:
    """Test parameter validation for echo_tool."""
    
    
    
    def test_message_min_length_constraint(self):
        """Test that message enforces minimum length."""
        with pytest.raises(ValidationError):
            EchotoolParams(
                message="",            )
    
    def test_message_max_length_constraint(self):
        """Test that message enforces maximum length."""
        with pytest.raises(ValidationError):
            EchotoolParams(
                message="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",            )
    def test_repeat_count_min_value_constraint(self):
        """Test that repeat_count enforces minimum value."""
        with pytest.raises(ValidationError):
            EchotoolParams(
                message='hello',
                repeat_count=0            )
    
    def test_repeat_count_max_value_constraint(self):
        """Test that repeat_count enforces maximum value."""
        with pytest.raises(ValidationError):
            EchotoolParams(
                message='hello',
                repeat_count=11            )
    
    
    
    def test_valid_params(self):
        """Test that valid parameters are accepted."""
        params = EchotoolParams(
            message='hello',
        )
        assert params is not None


@pytest.mark.asyncio
class TestToolEchotool:
    """Test echo_tool execution."""
    
    async def test_echo_once(self):
        """Echo once"""
        # Setup context
        ctx = MDSContext(
            user_id='user_demo',
            session_id='session_demo'
        )
        
        # Execute tool
        result = await echo_tool(
            ctx,
            message='hello',
            repeat_count=1,
        )
        
        # Assert results
        assert result is not None
        # Check expected output fields
        expected = {'original_message': 'hello', 'repeat_count': 1, 'echoed_messages': ['hello'], 'total_length': 5}
        for key, value in expected.items():
            assert key in result, f"Expected key '{key}' not found in result"
            assert result[key] == value, f"Expected {key}={value}, got {result[key]}"
    
    async def test_echo_multiple_times(self):
        """Echo multiple times"""
        # Setup context
        ctx = MDSContext(
            user_id='user_demo',
            session_id='session_repeat'
        )
        
        # Execute tool
        result = await echo_tool(
            ctx,
            message='test',
            repeat_count=3,
        )
        
        # Assert results
        assert result is not None
        # Check expected output fields
        expected = {'original_message': 'test', 'repeat_count': 3, 'echoed_messages': ['test', 'test', 'test'], 'total_length': 12}
        for key, value in expected.items():
            assert key in result, f"Expected key '{key}' not found in result"
            assert result[key] == value, f"Expected {key}={value}, got {result[key]}"
    
    
    async def test_event_registration(self):
        """Test that tool registers audit event."""
        # Setup context
        ctx = MDSContext(
            user_id="test_user",
            session_id="test_session"
        )
        
        # Execute tool
        await echo_tool(
            ctx,
            message='hello',
        )
        
        # Assert event was registered
        assert len(ctx.tool_events) > 0
        event = ctx.tool_events[-1]
        assert event.status == "success"


@pytest.mark.asyncio
class TestToolEchotoolErrors:
    """Test error scenarios for echo_tool."""
    
    async def test_repeat_count_too_high(self):
        """Repeat count too high"""
        with pytest.raises(ValidationError):
            EchotoolParams(
                message='fail',
                repeat_count=100,
            )
    
