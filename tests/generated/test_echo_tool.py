"""Auto-generated tests for: echo_tool

Generated from: config/tools/echo_tool.yaml
DO NOT EDIT THIS FILE MANUALLY - Changes will be overwritten

This test suite validates the generated tool's parameter constraints and execution.
"""
import pytest
from unittest.mock import AsyncMock, MagicMock
from src.pydantic_ai_integration.dependencies import MDSContext
from src.pydantic_ai_integration.tools.generated.echo_tool import echo_tool, EchotoolParams


class TestParamsEchotool:
    """Test parameter validation for echo_tool."""
    
    
    
    def test_message_min_length_constraint(self):
        """Test that message enforces minimum length."""
        with pytest.raises(ValueError):
            EchotoolParams(
                message="",            )
    
    def test_message_max_length_constraint(self):
        """Test that message enforces maximum length."""
        with pytest.raises(ValueError):
            EchotoolParams(
                message="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",            )
    def test_repeat_count_min_value_constraint(self):
        """Test that repeat_count enforces minimum value."""
        with pytest.raises(ValueError):
            EchotoolParams(
                message="None",
                repeat_count=0            )
    
    def test_repeat_count_max_value_constraint(self):
        """Test that repeat_count enforces maximum value."""
        with pytest.raises(ValueError):
            EchotoolParams(
                message="None",
                repeat_count=11            )
    
    
    
    def test_valid_params(self):
        """Test that valid parameters are accepted."""
        params = EchotoolParams(
            message="None",
        )
        assert params is not None


@pytest.mark.asyncio
class TestToolEchotool:
    """Test echo_tool execution."""
    
    async def test_successful_execution(self):
        """Test successful tool execution."""
        # Setup context
        ctx = MDSContext(
            user_id="test_user",
            session_id="test_session"
        )
        
        # Execute tool
        result = await echo_tool(
            ctx,
            message="None",
        )
        
        # Assert results
        assert result is not None
        assert result["status"] == "success"
        assert result["tool"] == "echo_tool"
    
    async def test_event_registration(self):
        """Test that tool registers audit event."""
        # Setup context
        ctx = MDSContext(
            user_id="test_user",
            session_id="test_session"
        )
        
        # Execute tool
        await echo_tool(
            ctx,
            message="None",
        )
        
        # Assert event was registered
        assert len(ctx.tool_events) > 0
        event = ctx.tool_events[-1]
        assert event.status == "success"