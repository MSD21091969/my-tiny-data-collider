"""Auto-generated tests for: gmail_search_messages

Generated from: config/tools/gmail_search_messages.yaml
DO NOT EDIT THIS FILE MANUALLY - Changes will be overwritten

This test suite validates the generated tool's parameter constraints and execution.
"""
import pytest
from pydantic import ValidationError
from unittest.mock import AsyncMock, MagicMock
from src.pydantic_ai_integration.dependencies import MDSContext
from src.pydantic_ai_integration.tools.generated.gmail_search_messages import gmail_search_messages, GmailsearchmessagesParams


class TestParamsGmailsearchmessages:
    """Test parameter validation for gmail_search_messages."""
    
    
    
    def test_query_min_length_constraint(self):
        """Test that query enforces minimum length."""
        with pytest.raises(ValidationError):
            GmailsearchmessagesParams(
                query="",            )
    
    def test_max_results_min_value_constraint(self):
        """Test that max_results enforces minimum value."""
        with pytest.raises(ValidationError):
            GmailsearchmessagesParams(
                query='from:notifications@example.com is:unread',
                max_results=0,            )
    
    def test_max_results_max_value_constraint(self):
        """Test that max_results enforces maximum value."""
        with pytest.raises(ValidationError):
            GmailsearchmessagesParams(
                query='from:notifications@example.com is:unread',
                max_results=101,            )
    
    
    
    
    
    
    def test_valid_params(self):
        """Test that valid parameters are accepted."""
        params = GmailsearchmessagesParams(
            query='from:notifications@example.com is:unread',
        )
        assert params is not None


@pytest.mark.asyncio
class TestToolGmailsearchmessages:
    """Test gmail_search_messages execution."""
    
    async def test_search_for_unread_messages_from_specific_sender(self):
        """Search for unread messages from specific sender"""
        # Setup context
        ctx = MDSContext(
            user_id='test_user',
            session_id='test_session'
        )
        
        # Execute tool
        result = await gmail_search_messages(
            ctx,
            query='from:notifications@example.com is:unread',
            max_results=10,
        )
        
        # Assert results
        assert result is not None
        # Check expected output fields
        expected = {'messages': [{'id': 'mock-msg-1', 'subject': 'Notification'}], 'result_size_estimate': 5, 'query_used': 'from:notifications@example.com is:unread'}
        for key, value in expected.items():
            assert key in result, f"Expected key '{key}' not found in result"
            assert result[key] == value, f"Expected {key}={value}, got {result[key]}"
    
    
    async def test_event_registration(self):
        """Test that tool registers audit event."""
        # Setup context
        ctx = MDSContext(
            user_id="test_user",
            session_id="test_session"
        )
        
        # Execute tool
        await gmail_search_messages(
            ctx,
            query='from:notifications@example.com is:unread',
        )
        
        # Assert event was registered
        assert len(ctx.tool_events) > 0
        event = ctx.tool_events[-1]
        assert event.status == "success"


@pytest.mark.asyncio
class TestToolGmailsearchmessagesErrors:
    """Test error scenarios for gmail_search_messages."""
    
    async def test_empty_query_string(self):
        """Empty query string"""
        with pytest.raises(ValidationError):
            GmailsearchmessagesParams(
                query='',
                max_results=10,
            )
    
