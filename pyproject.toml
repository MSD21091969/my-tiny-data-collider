[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "my-tiny-data-collider"
version = "0.1.0"
description = "Pydantic AI integration for tool and method management with FastAPI"
readme = "README.md"
requires-python = ">=3.13"
license = { text = "MIT" }
authors = [{ name = "MSD", email = "msd@example.com" }]
keywords = ["pydantic", "ai", "tools", "methods", "fastapi", "firestore"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
]

dependencies = [
    "pydantic>=2.0",
    "pydantic-ai>=0.0.14",
    "fastapi>=0.115.0",
    "uvicorn>=0.32.0",
    "python-multipart>=0.0.12",
    "pyjwt>=2.8.0",
    "google-cloud-firestore>=2.18.0",
    "google-auth>=2.35.0",
    "httpx>=0.27.0",
    "pyyaml>=6.0",
    "python-dotenv>=1.0.0",
    "prometheus-client>=0.20.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.2.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=7.0.0",
    "pytest-mock>=3.12.0",
    "black>=24.0.0",
    "ruff>=0.6.0",
    "mypy>=1.11.0",
]

[project.urls]
Homepage = "https://github.com/MSD21091969/my-tiny-data-collider"
Repository = "https://github.com/MSD21091969/my-tiny-data-collider"
Documentation = "https://github.com/MSD21091969/my-tiny-data-collider/docs"

[tool.setuptools]
package-dir = { "" = "src" }

[tool.setuptools.packages.find]
where = ["src"]
include = ["*"]
namespaces = false

[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "unit: Unit tests (fast, no external dependencies)",
    "integration: Integration tests (slower, may use mocks)",
    "firestore: Tests requiring Firestore connection",
    "mock: Tests using mock backends",
    "slow: Tests that take >5 seconds to run",
]
addopts = ["-v", "--tb=short", "--strict-markers", "--strict-config"]

[tool.black]
line-length = 100
target-version = ["py313"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py313"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long (handled by black)
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
