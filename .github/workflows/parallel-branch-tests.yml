name: Parallel Feature Branch Tests

on:
  schedule:
    # Run every 6 hours to test all active feature branches
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      branches:
        description: 'Comma-separated list of branches to test (leave empty for all)'
        required: false
        type: string

jobs:
  discover-branches:
    name: Discover Active Feature Branches
    runs-on: ubuntu-latest
    outputs:
      branches: ${{ steps.get-branches.outputs.branches }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get active feature branches
        id: get-branches
        run: |
          if [ -n "${{ github.event.inputs.branches }}" ]; then
            # Manual trigger with specific branches
            BRANCHES="${{ github.event.inputs.branches }}"
          else
            # Auto-discover all feature branches
            BRANCHES=$(git branch -r | grep 'origin/feature/' | sed 's|origin/||' | tr '\n' ',' | sed 's/,$//')
          fi
          
          echo "Found branches: $BRANCHES"
          
          # Convert to JSON array for matrix
          IFS=',' read -ra BRANCH_ARRAY <<< "$BRANCHES"
          JSON_ARRAY="["
          for branch in "${BRANCH_ARRAY[@]}"; do
            branch=$(echo "$branch" | xargs)  # trim whitespace
            JSON_ARRAY+="\"$branch\","
          done
          JSON_ARRAY="${JSON_ARRAY%,}]"  # remove trailing comma
          
          echo "branches=$JSON_ARRAY" >> $GITHUB_OUTPUT
          echo "Matrix: $JSON_ARRAY"

  test-branches:
    name: Test ${{ matrix.branch }}
    runs-on: ubuntu-latest
    needs: discover-branches
    if: needs.discover-branches.outputs.branches != '[]'
    
    strategy:
      fail-fast: false
      matrix:
        branch: ${{ fromJson(needs.discover-branches.outputs.branches) }}
    
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.branch }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run tests
        id: tests
        run: |
          python -m pytest tests/ -v --tb=short --junitxml=test-results-${{ matrix.branch }}.xml
        continue-on-error: true
      
      - name: Check coverage
        id: coverage
        run: |
          python -m pytest tests/ --cov=src --cov-report=term-missing --cov-report=xml --cov-fail-under=85
        continue-on-error: true
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.branch }}
          path: test-results-${{ matrix.branch }}.xml
      
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-${{ matrix.branch }}
          path: coverage.xml
      
      - name: Report status
        if: always()
        run: |
          echo "### Branch: ${{ matrix.branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tests: ${{ steps.tests.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage: ${{ steps.coverage.outcome }}" >> $GITHUB_STEP_SUMMARY

  summarize:
    name: Test Summary Report
    runs-on: ubuntu-latest
    needs: [discover-branches, test-branches]
    if: always()
    
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: test-results
          pattern: test-results-*
      
      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          path: coverage-reports
          pattern: coverage-*
      
      - name: Generate summary report
        run: |
          echo "## üß™ Parallel Feature Branch Test Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Run Date:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Branch Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Branch | Tests | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          
          for dir in test-results/*/; do
            branch=$(basename "$dir" | sed 's/test-results-//')
            if [ -f "$dir"/*.xml ]; then
              echo "| \`$branch\` | ‚úÖ Passed | Ready |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| \`$branch\` | ‚ùå Failed | Needs attention |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          for coverage_dir in coverage-reports/*/; do
            branch=$(basename "$coverage_dir" | sed 's/coverage-//')
            if [ -f "$coverage_dir/coverage.xml" ]; then
              coverage=$(grep -oP 'line-rate="\K[^"]+' "$coverage_dir/coverage.xml" | head -1)
              coverage_pct=$(echo "$coverage * 100" | bc -l | xargs printf "%.1f")
              echo "- \`$branch\`: ${coverage_pct}%" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Branches with failing tests should be investigated" >> $GITHUB_STEP_SUMMARY
          echo "- Ensure all branches maintain ‚â•90% coverage before merging" >> $GITHUB_STEP_SUMMARY
          echo "- Consider merging passing branches to \`develop\`" >> $GITHUB_STEP_SUMMARY
      
      - name: Create issue if failures detected
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const title = '‚ö†Ô∏è Feature Branch Tests Failing';
            const body = `## Parallel Branch Testing Alert
            
            Some feature branches have failing tests in the scheduled parallel test run.
            
            **Run:** ${{ github.run_id }}
            **Date:** ${new Date().toISOString()}
            
            ### Action Required
            - Check [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - Review failing branches
            - Fix tests before merging to develop
            
            ### Affected Branches
            See workflow summary for details.
            
            ---
            *Auto-generated by parallel-branch-tests workflow*
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['ci', 'test-failure']
            });
