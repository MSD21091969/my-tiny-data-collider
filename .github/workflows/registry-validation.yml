name: Registry Validation

on:
    push:
        branches: [main, develop, feature/*]
    pull_request:
        branches: [main, develop]
    workflow_dispatch: # Allow manual trigger

jobs:
    validate-registries:
        name: Validate Method & Tool Registries
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.12"
                  cache: "pip"

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
                  if [ -f pyproject.toml ]; then pip install -e .; fi

            - name: Run registry validation (STRICT mode)
              env:
                  REGISTRY_STRICT_VALIDATION: "true"
              run: |
                  python scripts/validate_registries.py --strict --verbose

            - name: Check for validation errors
              if: failure()
              run: |
                  echo "::error::Registry validation failed. Please fix the reported issues."
                  exit 1

    test-registries:
        name: Run Registry Tests
        runs-on: ubuntu-latest
        needs: validate-registries

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.12"
                  cache: "pip"

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
                  if [ -f pyproject.toml ]; then pip install -e .[dev]; fi

            - name: Run registry tests
              run: |
                  python -m pytest tests/registry/ tests/test_integration_init.py -v --tb=short

            - name: Generate coverage report
              if: always()
              run: |
                  python -m pytest tests/registry/ tests/test_integration_init.py --cov=src/pydantic_ai_integration/registry --cov-report=term --cov-report=html
              continue-on-error: true

            - name: Upload coverage report
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: coverage-report
                  path: htmlcov/
                  retention-days: 30
              continue-on-error: true
