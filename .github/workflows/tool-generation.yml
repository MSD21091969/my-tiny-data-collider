name: Tool Generation Validator

on:
  pull_request:
    paths:
      - 'config/tools/**/*.yaml'
      - 'templates/**/*.jinja2'
      - 'scripts/main.py'
      - 'scripts/generate_tools.py'

jobs:
  validate-tool-generation:
    name: Validate Tool Generation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history to compare
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Find changed YAML files
        id: changed-files
        run: |
          echo "Changed tool YAML files:"
          git diff --name-only origin/develop...HEAD | grep 'config/tools/.*\.yaml$' || echo "No YAML changes"
          
          # Save changed files to environment
          CHANGED_YAMLS=$(git diff --name-only origin/develop...HEAD | grep 'config/tools/.*\.yaml$' || echo "")
          echo "changed_yamls<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_YAMLS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Regenerate tools from YAML
        if: steps.changed-files.outputs.changed_yamls != ''
        run: |
          echo "Regenerating tools..."
          while IFS= read -r yaml_file; do
            if [ -n "$yaml_file" ]; then
              echo "Processing: $yaml_file"
              python -m scripts.main "$yaml_file"
            fi
          done <<< "${{ steps.changed-files.outputs.changed_yamls }}"
      
      - name: Check for uncommitted changes
        if: steps.changed-files.outputs.changed_yamls != ''
        run: |
          git diff --exit-code src/pydantic_ai_integration/tools/generated/ tests/generated/ || {
            echo "‚ùå Generated files don't match YAML definitions!"
            echo ""
            echo "The following files need to be regenerated:"
            git diff --name-only src/pydantic_ai_integration/tools/generated/ tests/generated/
            echo ""
            echo "Please run:"
            echo "  python -m scripts.main config/tools/*.yaml"
            echo ""
            echo "Then commit the changes."
            exit 1
          }
      
      - name: Run tests on generated tools
        if: steps.changed-files.outputs.changed_yamls != ''
        run: |
          echo "Running tests for generated tools..."
          python -m pytest tests/generated/ -v --tb=short
      
      - name: Comment on PR with results
        if: always() && steps.changed-files.outputs.changed_yamls != ''
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const execSync = require('child_process').execSync;
            
            // Get test results summary
            let testSummary = 'Tests completed';
            try {
              const testOutput = execSync('python -m pytest tests/generated/ -v --tb=short 2>&1').toString();
              testSummary = testOutput.split('\n').slice(-5).join('\n');
            } catch (e) {
              testSummary = '‚ùå Some tests failed - see logs';
            }
            
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            const changedFiles = `${{ steps.changed-files.outputs.changed_yamls }}`.split('\n').filter(Boolean);
            
            const output = `## üõ†Ô∏è Tool Generation Results
            
            ### ‚úÖ Status: Success
            
            ### üìù Changed Tool Definitions
            ${changedFiles.map(f => `- \`${f}\``).join('\n')}
            
            ### üß™ Test Results
            \`\`\`
            ${testSummary}
            \`\`\`
            
            ### üìä Detailed Reports
            - [Full Test Run]($runUrl)
            - [Coverage Report]($runUrl/artifacts) (when available)
            - [Generated Files](https://github.com/${context.repo.owner}/${context.repo.repo}/tree/${context.sha}/src/pydantic_ai_integration/tools/generated/)
            
            ### üîç Review Checklist
            - [ ] Generated code matches YAML specifications
            - [ ] All parameter validations working correctly
            - [ ] Policy enforcement configured properly
            - [ ] Test coverage ‚â• 90%
            - [ ] Documentation updated (if needed)
            
            ### üìö Next Steps
            1. Review generated files in \`src/pydantic_ai_integration/tools/generated/\`
            2. Check test coverage: \`python -m pytest tests/generated/ --cov\`
            3. Update feature-specific docs if adding new toolset
            4. Ensure CHANGELOG.md reflects changes
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  test-all-tools:
    name: Test All Generated Tools
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: List all YAML tools
        run: |
          echo "## Available Tools" > tool-inventory.md
          echo "" >> tool-inventory.md
          for yaml_file in config/tools/*.yaml; do
            tool_name=$(basename "$yaml_file" .yaml)
            echo "- \`$tool_name\`" >> tool-inventory.md
          done
          cat tool-inventory.md
      
      - name: Test each tool individually
        run: |
          for yaml_file in config/tools/*.yaml; do
            tool_name=$(basename "$yaml_file" .yaml)
            echo "Testing: $tool_name"
            
            test_file="tests/generated/test_${tool_name}.py"
            if [ -f "$test_file" ]; then
              python -m pytest "$test_file" -v --tb=short || {
                echo "‚ùå Tests failed for $tool_name"
                exit 1
              }
            else
              echo "‚ö†Ô∏è  No test file found for $tool_name"
            fi
          done
      
      - name: Generate coverage report
        run: |
          python -m pytest tests/generated/ --cov=src/pydantic_ai_integration/tools/generated --cov-report=term-missing --cov-report=html
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: tool-coverage-report
          path: htmlcov/

  schema-validation:
    name: Validate Tool Schema
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml jsonschema pydantic
      
      - name: Validate against schema
        run: |
          python -c "
          import yaml
          import sys
          from pathlib import Path
          
          # Load schema
          with open('config/tool_schema_v2.yaml') as f:
              schema = yaml.safe_load(f)
          
          errors = []
          warnings = []
          
          for yaml_file in Path('config/tools').glob('*.yaml'):
              with open(yaml_file) as f:
                  tool_def = yaml.safe_load(f)
              
              # Basic required fields check
              required_fields = ['name', 'description', 'parameters', 'implementation', 'returns']
              missing = [field for field in required_fields if field not in tool_def]
              
              if missing:
                  errors.append(f'{yaml_file.name}: Missing required fields: {missing}')
              else:
                  print(f'‚úì {yaml_file.name}')
              
              # Check for deprecated fields
              if tool_def.get('implementation', {}).get('template') == 'simple':
                  warnings.append(f'{yaml_file.name}: Using legacy template field (use type: simple)')
          
          if errors:
              print('\n‚ùå Validation Errors:')
              for error in errors:
                  print(f'  {error}')
              sys.exit(1)
          
          if warnings:
              print('\n‚ö†Ô∏è  Warnings:')
              for warning in warnings:
                  print(f'  {warning}')
          
          print('\n‚úÖ All tool definitions valid!')
          "
