name: Development Session Readiness Check

on:
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of readiness check'
        required: true
        type: choice
        options:
          - 'quick-health'
          - 'full-validation'
          - 'team-kickoff'
      notify_team:
        description: 'Send notification to team'
        required: false
        type: boolean
        default: false

  schedule:
    # Daily at 9 AM UTC (start of workday check)
    - cron: '0 9 * * 1-5'  # Weekdays only

jobs:
  check-develop-health:
    name: Check Develop Branch Health
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.health.outputs.status }}
      issues: ${{ steps.health.outputs.issues }}
    
    steps:
      - name: Checkout develop
        uses: actions/checkout@v4
        with:
          ref: develop
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run health checks
        id: health
        run: |
          echo "## 🏥 Develop Branch Health Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          ISSUES=""
          STATUS="healthy"
          
          # Check 1: All tests pass
          echo "### 1. Test Suite" >> $GITHUB_STEP_SUMMARY
          if python -m pytest tests/generated/ -v --tb=short; then
            echo "✅ All tests passing" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Tests failing" >> $GITHUB_STEP_SUMMARY
            ISSUES="${ISSUES}tests_failing,"
            STATUS="unhealthy"
          fi
          
          # Check 2: Coverage threshold
          echo "### 2. Code Coverage" >> $GITHUB_STEP_SUMMARY
          if python -m pytest tests/ --cov=src --cov-fail-under=90 > /dev/null 2>&1; then
            echo "✅ Coverage ≥ 90%" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️  Coverage below 90%" >> $GITHUB_STEP_SUMMARY
            ISSUES="${ISSUES}low_coverage,"
          fi
          
          # Check 3: YAML validity
          echo "### 3. Tool YAML Definitions" >> $GITHUB_STEP_SUMMARY
          python -c "
          import yaml, sys
          from pathlib import Path
          errors = []
          for f in Path('config/tools').glob('*.yaml'):
              try:
                  yaml.safe_load(f.read_text())
              except Exception as e:
                  errors.append(str(f))
          sys.exit(1 if errors else 0)
          " && echo "✅ All YAML valid" >> $GITHUB_STEP_SUMMARY || {
            echo "❌ YAML validation errors" >> $GITHUB_STEP_SUMMARY
            ISSUES="${ISSUES}invalid_yaml,"
            STATUS="unhealthy"
          }
          
          # Check 4: Documentation exists
          echo "### 4. Documentation" >> $GITHUB_STEP_SUMMARY
          DOCS_EXIST=true
          [ ! -f "README.md" ] && DOCS_EXIST=false
          [ ! -f "QUICK_REFERENCE.md" ] && DOCS_EXIST=false
          [ ! -f "docs/LAYERED_ARCHITECTURE_FLOW.md" ] && DOCS_EXIST=false
          
          if $DOCS_EXIST; then
            echo "✅ Core documentation present" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️  Missing documentation files" >> $GITHUB_STEP_SUMMARY
            ISSUES="${ISSUES}missing_docs,"
          fi
          
          # Check 5: Dependencies up-to-date
          echo "### 5. Dependencies" >> $GITHUB_STEP_SUMMARY
          if pip list --outdated | grep -q "pydantic\|fastapi\|pytest"; then
            echo "⚠️  Critical dependencies have updates" >> $GITHUB_STEP_SUMMARY
            ISSUES="${ISSUES}outdated_deps,"
          else
            echo "✅ Dependencies current" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "issues=$ISSUES" >> $GITHUB_OUTPUT
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Overall Status: ${STATUS^^}" >> $GITHUB_STEP_SUMMARY

  check-feature-branches:
    name: Check Feature Branch Status
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Analyze feature branches
        run: |
          echo "## 🌳 Feature Branch Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Branch | Last Commit | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          for branch in $(git branch -r | grep 'origin/feature/' | sed 's|origin/||'); do
            LAST_COMMIT=$(git log -1 --format="%cr" "origin/$branch" 2>/dev/null || echo "unknown")
            
            # Check if stale (> 7 days)
            if git log -1 --format="%ct" "origin/$branch" | awk '{if (systime() - $1 > 604800) exit 0; else exit 1}' 2>/dev/null; then
              STATUS="⚠️  Stale"
            else
              STATUS="✅ Active"
            fi
            
            echo "| \`$branch\` | $LAST_COMMIT | $STATUS |" >> $GITHUB_STEP_SUMMARY
          done

  check-github-issues:
    name: Check GitHub Issues Status
    runs-on: ubuntu-latest
    
    steps:
      - name: Get open Week 2 issues
        uses: actions/github-script@v7
        with:
          script: |
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'week-2'
            });
            
            core.summary
              .addHeading('📋 Week 2 Issue Status', 2)
              .addTable([
                [{data: 'Issue', header: true}, {data: 'Status', header: true}, {data: 'Assignee', header: true}],
                ...issues.data.map(issue => [
                  `<a href="${issue.html_url}">#${issue.number} ${issue.title}</a>`,
                  issue.state,
                  issue.assignee ? issue.assignee.login : 'Unassigned'
                ])
              ])
              .write();

  session-readiness-report:
    name: Session Readiness Report
    runs-on: ubuntu-latest
    needs: [check-develop-health, check-feature-branches, check-github-issues]
    if: always()
    
    steps:
      - name: Generate readiness report
        run: |
          echo "# 🚀 Development Session Readiness Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Generated:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.check-develop-health.outputs.status }}" == "healthy" ]; then
            echo "## ✅ READY FOR DEVELOPMENT" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The \`develop\` branch is healthy and ready for team collaboration." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ⚠️  ACTION REQUIRED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Issues detected: ${{ needs.check-develop-health.outputs.issues }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Fix these issues before starting development sessions." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Quick Stats" >> $GITHUB_STEP_SUMMARY
          echo "- Develop status: ${{ needs.check-develop-health.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- Feature branches: See branch status table" >> $GITHUB_STEP_SUMMARY
          echo "- Open issues: See issue status table" >> $GITHUB_STEP_SUMMARY
      
      - name: Create GitHub Issue if unhealthy
        if: needs.check-develop-health.outputs.status != 'healthy' && github.event.inputs.notify_team == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const issues = '${{ needs.check-develop-health.outputs.issues }}';
            
            const title = '⚠️ Develop Branch Health Check Failed';
            const body = `## Development Session Readiness Alert
            
            The automated health check for the \`develop\` branch has detected issues.
            
            **Issues Found:**
            ${issues.split(',').filter(Boolean).map(i => `- ${i.replace(/_/g, ' ')}`).join('\n')}
            
            **Action Required:**
            1. Check [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            2. Fix identified issues
            3. Re-run health check: \`gh workflow run dev-session-readiness.yml\`
            
            **Impact:**
            Development sessions should not proceed until these issues are resolved.
            
            ---
            *Auto-generated by dev-session-readiness workflow*
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['ci', 'health-check', 'urgent']
            });
      
      - name: Send notification (if requested)
        if: github.event.inputs.notify_team == 'true'
        run: |
          echo "📧 Notification would be sent here (configure Slack/Discord/Email)"
          echo "Status: ${{ needs.check-develop-health.outputs.status }}"

  team-kickoff-checklist:
    name: Team Kickoff Checklist
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'team-kickoff'
    
    steps:
      - name: Generate kickoff checklist
        run: |
          echo "# 🎯 Week 2 Team Kickoff Checklist" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Pre-Development" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] All developers have repo access" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] All developers added to GitHub team" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] All feature branches created" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] All GitHub issues created and assigned" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Setup" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Developers synced feature branches with develop" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Local environments setup (\`.venv\`, dependencies)" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Tests passing locally (9/9 for echo_tool)" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Documentation reviewed (README, QUICK_REFERENCE)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] GitHub Actions enabled" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Branch protection rules configured" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] First workflow run successful" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Parallel branch testing scheduled" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Communication" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Team communication channel setup (Slack/Discord)" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Daily standup time scheduled" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Code review assignments clear" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Week 2 timeline communicated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Ready to Code!" >> $GITHUB_STEP_SUMMARY
          echo "Once all items checked, development can begin! 🚀" >> $GITHUB_STEP_SUMMARY
