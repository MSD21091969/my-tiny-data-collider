name: CI - Test Suite

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.12', '3.13']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run unit tests (tool layer)
        run: |
          python -m pytest tests/generated/ -v --tb=short --junitxml=test-results-unit.xml
      
      - name: Run integration tests (service layer)
        run: |
          python -m pytest tests/integration/ -v --tb=short --junitxml=test-results-integration.xml
        continue-on-error: true  # Week 2 feature - may not exist yet
      
      - name: Run API tests (HTTP layer)
        run: |
          python -m pytest tests/api/ -v --tb=short --junitxml=test-results-api.xml
        continue-on-error: true  # Week 2 feature - may not exist yet
      
      - name: Run all tests with coverage
        run: |
          python -m pytest tests/ --cov=src --cov-report=xml --cov-report=term-missing --cov-fail-under=90
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true  # Don't fail if codecov upload fails
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: test-results-*.xml

  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort mypy yamllint
      
      - name: Lint YAML tool specifications
        run: |
          yamllint -c .yamllint config/tools/
      
      - name: Validate YAML schema compliance
        run: |
          python -c "
          import yaml
          import sys
          from pathlib import Path
          
          required_fields = ['name', 'description', 'parameters', 'implementation', 'returns']
          errors = []
          
          for yaml_file in Path('config/tools').glob('*.yaml'):
              with open(yaml_file) as f:
                  tool_def = yaml.safe_load(f)
              
              missing = [field for field in required_fields if field not in tool_def]
              if missing:
                  errors.append(f'{yaml_file.name}: Missing {missing}')
              else:
                  print(f'✓ {yaml_file.name}')
          
          if errors:
              for error in errors:
                  print(f'✗ {error}')
              sys.exit(1)
          "
      
      - name: Run ruff (linter)
        run: |
          ruff check src/ tests/ --output-format=github
        continue-on-error: true
      
      - name: Check code formatting with black
        run: |
          black --check src/ tests/
        continue-on-error: true
      
      - name: Check import sorting with isort
        run: |
          isort --check-only src/ tests/
        continue-on-error: true
      
      - name: Run type checking with mypy
        run: |
          mypy src/ --ignore-missing-imports --pretty
        continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit
      
      - name: Run safety check (dependency vulnerabilities)
        run: |
          pip install -r requirements.txt
          safety check --json
        continue-on-error: true
      
      - name: Run bandit (security issues in code)
        run: |
          bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json

  validate-yaml:
    name: Validate Tool YAML Definitions
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyyaml jsonschema
      
      - name: Validate YAML syntax
        run: |
          python -c "
          import yaml
          import sys
          from pathlib import Path
          
          errors = []
          for yaml_file in Path('config/tools').glob('*.yaml'):
              try:
                  with open(yaml_file) as f:
                      yaml.safe_load(f)
                  print(f'✓ {yaml_file.name}')
              except Exception as e:
                  errors.append(f'✗ {yaml_file.name}: {e}')
          
          if errors:
              print('\nErrors found:')
              for error in errors:
                  print(error)
              sys.exit(1)
          "
      
      - name: Validate tool generation
        run: |
          # Try regenerating all tools to ensure YAML is valid
          for yaml_file in config/tools/*.yaml; do
            echo "Generating from $yaml_file"
            python -m scripts.main "$yaml_file"
          done
      
      - name: Check generated files are up-to-date
        run: |
          if git diff --name-only | grep -E 'generated/.*\.py$'; then
            echo "❌ Generated files are out of sync with YAML definitions!"
            echo "Run: python -m scripts.main config/tools/*.yaml"
            git diff
            exit 1
          else
            echo "✅ Generated files are up-to-date"
          fi

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test, lint, security, validate-yaml]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests**: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Lint**: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security**: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **YAML Validation**: ${{ needs.validate-yaml.result }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "❌ Tests failed!" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ All checks passed!" >> $GITHUB_STEP_SUMMARY
          fi
