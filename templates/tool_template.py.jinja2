"""Auto-generated tool: {{ tool.name }}

Generated from: config/tools/{{ tool.name }}.yaml
DO NOT EDIT THIS FILE MANUALLY - Changes will be overwritten
"""
from pydantic import BaseModel, Field
from typing import Dict, Any, Optional, List
from src.pydantic_ai_integration.tool_decorator import register_mds_tool
from src.pydantic_ai_integration.dependencies import MDSContext
{% if tool.implementation_type == 'composite' %}
from src.pydantic_ai_integration.tools.chain_executor import ChainExecutor
{% elif tool.implementation_type == 'api_call' %}
from {{ tool.implementation.api_call.client_module }} import {{ tool.implementation.api_call.client_class }}
from src.pydantic_ai_integration.google_workspace.models import {{ tool.implementation.api_call.request_type }}
{% endif %}


class {{ tool.name | capitalize | replace('_', '') }}Params(BaseModel):
    """Parameters for {{ tool.name }}.
    
    {{ tool.description }}
    """
    {% for param in tool.parameters %}
    {{ param.name }}: {% if not param.required %}Optional[{% endif %}{{ param.python_type }}{% if not param.required %}]{% endif %} = Field(
        {% if param.required %}...{% else %}{{ param.default_value }}{% endif %},
        {% if param.min_value is defined %}ge={{ param.min_value }},{% endif %}
        {% if param.max_value is defined %}le={{ param.max_value }},{% endif %}
        {% if param.min_length is defined %}min_length={{ param.min_length }},{% endif %}
        {% if param.max_length is defined %}max_length={{ param.max_length }},{% endif %}
        description="{{ param.description }}"
    )
    {% endfor %}

    class Config:
        json_schema_extra = {
            "examples": [
                {
                    {% for param in tool.parameters %}
                    "{{ param.name }}": {{ param.example_value }}{% if not loop.last %},{% endif %}
                    {% endfor %}
                }
            ]
        }


@register_mds_tool(
    name="{{ tool.name }}",
    display_name="{{ tool.display_name }}",
    description="{{ tool.description }}",
    category="{{ tool.category }}",
    version="{{ tool.version }}",
    tags={{ tool.tags }},
    enabled={{ tool.business_rules.enabled | capitalize }},
    requires_auth={{ tool.business_rules.requires_auth | capitalize }},
    required_permissions={{ tool.business_rules.required_permissions }},
    requires_casefile={{ tool.business_rules.requires_casefile | capitalize }},
    timeout_seconds={{ tool.business_rules.timeout_seconds }},
    params_model={{ tool.name | capitalize | replace('_', '') }}Params,
)
async def {{ tool.name }}(
    ctx: MDSContext,
    {% for param in tool.parameters %}
    {{ param.name }}: {{ param.python_type }}{% if not param.required %} = {{ param.default_value }}{% endif %}{% if not loop.last %},{% endif %}
    {% endfor %}
) -> Dict[str, Any]:
    """{{ tool.description }}
    
    Args:
        ctx: MDSContext with user_id, session_id, etc.
        {% for param in tool.parameters %}
        {{ param.name }}: {{ param.description }}
        {% endfor %}
    
    Returns:
        Dict containing execution results
    """
    # Register event for audit trail
    event_id = ctx.register_event(
        "{{ tool.name }}",
        {
            {% for param in tool.parameters %}
            "{{ param.name }}": {{ param.name }}{% if not loop.last %},{% endif %}
            {% endfor %}
        }
    )
    
    {% if tool.implementation_type == 'composite' %}
    # Composite tool implementation - execute chain of tools
    executor = ChainExecutor(ctx)
    
    chain_state = {
        {% for param in tool.parameters %}
        "{{ param.name }}": {{ param.name }}{% if not loop.last %},{% endif %}
        {% endfor %}
    }
    
    steps = {{ tool.implementation.composite.steps | tojson }}
    
    result = await executor.execute_chain(
        steps=steps,
        initial_state=chain_state,
        chain_name="{{ tool.name }}_chain"
    )
    
    {% elif tool.implementation_type == 'api_call' %}
    # API call implementation
    client = {{ tool.implementation.api_call.client_class }}()
    
    request = {{ tool.implementation.api_call.request_type }}(
        {% for param in tool.parameters %}
        {{ param.name }}={{ param.name }}{% if not loop.last %},{% endif %}
        {% endfor %}
    )
    
    response = await client.{{ tool.implementation.api_call.method_name }}(request)
    
    result = {
        "success": True,
        "data": response.model_dump(),
        "metadata": {
            "tool_name": "{{ tool.name }}",
            "timestamp": ctx.transaction_context.get("request_created_at"),
            "user_id": ctx.user_id,
            "session_id": ctx.session_id,
            "casefile_id": ctx.casefile_id
        }
    }
    
    {% else %}
    # Simple/default implementation
    result = {
        "tool": "{{ tool.name }}",
        "status": "success",
        {% for param in tool.parameters %}
        "{{ param.name }}": {{ param.name }}{% if not loop.last %},{% endif %}
        {% endfor %}
    }
    {% endif %}
    
    # Update audit trail
    if ctx.tool_events:
        last_event = ctx.tool_events[-1]
        last_event.result_summary = {
            "status": "success",
            "result_preview": str(result)[:100]
        }
        last_event.status = "success"
    
    return result
