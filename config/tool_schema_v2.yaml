# Tool Definition Schema (v2)
#
# Purpose:
#   Canonical schema for declarative tool definitions consumed by the Tool Factory.
#   This version captures implementation patterns, audit requirements, and
#   session/casefile policies needed to maintain a complete audit trail.
#
# Notes:
#   - Schema is expressed informally using YAML annotations to keep dependencies light.
#   - Validation helpers in the factory will enforce these rules programmatically.
#
# Top-level structure:
#
# name:           string  (required, snake_case)
# display_name:   string  (optional, defaults to title case)
# description:    string  (required)
# category:       string  (required)
# version:        string  (semver, default "1.0.0")
# tags:           list[string] (default [])
# metadata:       map (optional) - arbitrary key/value annotations
#
# classification: # ✅ systematic tool organization and discovery (optional when method_name specified)
#   domain:             enum [communication, workspace, automation, utilities] (required)
#   subdomain:          string (required) - specific area within domain
#   capability:         enum [create, read, update, delete, process, search] (required)
#   complexity:         enum [atomic, composite, pipeline] (required)
#   maturity:           enum [experimental, beta, stable, deprecated] (required)
#   integration_tier:   enum [internal, external, hybrid] (required)
#   # Note: When implementation.method_name is specified, classification is inherited from method
#   #       and these fields become optional overrides
#
# business_rules:
#   enabled:                  bool (default true)
#   requires_auth:            bool (default true)
#   required_permissions:     list[string] (default [])
#   timeout_seconds:          int (default 30)
#   rate_limit_per_minute:    int (optional)
#   visibility:               enum [public, internal, experimental] (optional)
#
# session_policies:  # ✅ ensures audit trail consistency for session lifecycle
#   requires_active_session:  bool (default true)
#   allow_new_session:        bool (default false)
#   allow_session_resume:     bool (default true)
#   session_event_type:       enum [request, resume, system] (default request)
#   log_request_payload:      bool (default true)
#   log_full_response:        bool (default true)
#
# casefile_policies: # ✅ enforces user/casefile rules for audit trail
#   requires_casefile:        bool (default false)
#   allowed_casefile_states:  list[string] (default ["active"])
#   create_if_missing:        bool (default false)
#   enforce_access_control:   bool (default true)
#   audit_casefile_changes:   bool (default true)
#
# parameters:   # list of parameter definitions (optional when method_name specified)
#   - name:        string (required)
#     type:        enum [string, integer, float, boolean, array, object] (required)
#     description: string (required)
#     required:    bool (default false)
#     default:     any  (optional; must conform to type)
#     allow_null:  bool (default false)
#     # String/array constraints
#     min_length:  int (optional)
#     max_length:  int (optional)
#     pattern:     regex (optional)
#     # Numeric constraints
#     min_value:   number (optional)
#     max_value:   number (optional)
#     multiple_of: number (optional)
#     # Array/object constraints
#     items:       map    (optional, for nested schemas)
#     properties:  map    (optional, for object parameters)
#     examples:    list   (optional, sample values)
#   # Note: When implementation.method_name is specified, parameters are inherited from method
#   #       and this section becomes optional. Use parameter_overrides to customize.
#
# parameter_overrides: # (optional) customize inherited parameters when using method_name
#   - name:        string (required) - must match inherited parameter name
#     description: string (optional) - override parameter description
#     required:    bool (optional) - override required flag
#     default:     any (optional) - override default value
#     # Can override any constraint field from parameters schema
#
# implementation:   # descriptive definition of how the tool executes
#   type: enum [simple, api_call, data_transform, composite, method_wrapper]
#   method_name: string (optional) - references method in MANAGED_METHODS registry
#                                     When specified, tool inherits parameters/classification from method
#
#   simple:  # used when type == simple
#     logic: |
#       # Python source code executed in generated tool body.
#       # Must return a value matching the `returns` schema.
#
#   api_call: # used when type == api_call
#     client_class: string  # import path to client wrapper
#     method:       string  # method name to invoke
#     request_mapping: map  # maps parameters to client kwargs
#     response_mapping: |
#       # Python snippet that maps the client response into the `returns` schema.
#     retry_policy:
#       max_attempts: int (default 1)
#       backoff_seconds: float (default 0)
#
#   data_transform: # used when type == data_transform
#     source: string  # e.g., "casefile.gmail_data.messages"
#     transform_logic: |
#       # Python snippet receiving `source_data` variable. Must set `result`.
#
#   composite:  # orchestrates multiple sub-tools (future use)
#     steps:
#       - tool: string  # name of tool to invoke
#         inputs: map   # maps current context to sub-tool parameters
#         on_success: map (optional)
#         on_failure: map (optional)
#
#   method_wrapper:  # wraps a method from MANAGED_METHODS registry
#     method_name: string  # name of method in registry (e.g., "create_casefile")
#     # Tool inherits parameters from method's request_model_class
#     # Tool can override specific parameters via parameter_overrides
#
# returns:  # description of tool output aligned with audit records
#   type: string  # JSON schema type (object, array, string, etc.)
#   description: string (optional)
#   properties:  map  # when type == object
#   items:       map  # when type == array
#   required:    list[string] (optional)
#
# audit_events:  # metadata to enforce audit trail completeness
#   success_event: string (default "tool_success")
#   failure_event: string (default "tool_failure")
#   log_response_fields: list[string] (optional)
#   redact_fields: list[string] (optional)
#   emit_casefile_event: bool (default true)
#
# examples:  # drives test generation and documentation
#   - description: string (required)
#     context:
#       session:
#         user_id: string
#         session_id: string
#         casefile_id: string (optional)
#       permissions: list[string] (optional)
#     input: map (required)
#     expected_output: map (required)
#     expect_casefile_changes: bool (default false)
#
# error_scenarios:  # (optional) define expected failures for negative tests
#   - description: string
#     input: map
#     expected_error: map
#
# documentation:  # optional doc-specific metadata
#   summary: string
#   changelog:
#     - version: string
#       date: string
#       notes: string
#
# ---
# Classification Field Definitions:
#
# domain: High-level functional category
#   - communication: Tools for messaging, email, chat, notifications
#   - workspace: Tools for document management, file storage, spreadsheets
#   - automation: Tools for workflows, orchestration, batch processing
#   - utilities: Tools for debugging, testing, system operations
#
# subdomain: Specific area within domain (examples by domain)
#   communication: email, chat, sms, notifications, calendar
#   workspace: google, microsoft, files, documents, spreadsheets
#   automation: pipelines, workflows, schedulers, batch
#   utilities: debugging, testing, monitoring, diagnostics
#
# capability: Primary operation type
#   - create: Creates new resources (send email, create file)
#   - read: Retrieves data (list messages, get document)
#   - update: Modifies existing resources (edit file, update record)
#   - delete: Removes resources (delete message, remove file)
#   - process: Transforms or analyzes data (pipeline, batch process)
#   - search: Queries and filters data (search messages, find files)
#
# complexity: Tool composition level
#   - atomic: Single operation, no sub-tools (send one email)
#   - composite: Combines multiple operations (fetch and format data)
#   - pipeline: Multi-step workflow with orchestration (email → drive → sheets)
#
# maturity: Development lifecycle stage
#   - experimental: Early development, API may change
#   - beta: Feature complete, testing in progress
#   - stable: Production ready, versioned, documented
#   - deprecated: Being phased out, migration path available
#
# integration_tier: External dependency scope
#   - internal: Uses only internal services (casefile, session)
#   - external: Requires external APIs (Gmail, Drive, Sheets)
#   - hybrid: Combines internal and external services
#
# ---
# Any additional custom keys should live under `metadata` to keep the schema
# forward-compatible.
