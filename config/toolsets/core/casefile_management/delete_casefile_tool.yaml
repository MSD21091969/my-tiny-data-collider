# Delete Casefile Tool Definition
# Generated from methods_inventory_v1.yaml
# Method: CasefileService.delete_casefile

name: delete_casefile_tool
display_name: Delete Casefile
description: Permanently delete a casefile and all associated data
category: workspace
version: "1.0.0"
tags:
  - casefile
  - crud
  - workspace
  - delete
  - destructive

metadata:
  source_method: delete_casefile
  service: CasefileService
  generated_from: methods_inventory_v1.yaml

classification:
  domain: workspace
  subdomain: casefile
  capability: delete
  complexity: atomic
  maturity: stable
  integration_tier: internal

business_rules:
  enabled: true
  requires_auth: true
  required_permissions:
    - casefiles:delete
  timeout_seconds: 30
  visibility: public

session_policies:
  requires_active_session: true
  allow_new_session: false
  allow_session_resume: true
  session_event_type: request
  log_request_payload: true
  log_full_response: true

casefile_policies:
  requires_casefile: true
  allowed_casefile_states:
    - active
    - archived
  create_if_missing: false
  enforce_access_control: true
  audit_casefile_changes: true

parameters:
  - name: casefile_id
    type: string
    description: Unique identifier of the casefile to delete
    required: true
    min_length: 1
    pattern: "^cf_[a-zA-Z0-9_-]+$"
    examples:
      - "cf_abc123xyz"

  - name: confirm_deletion
    type: boolean
    description: Confirmation flag - must be true to proceed with deletion
    required: true
    examples:
      - true

implementation:
  type: api_call
  api_call:
    service_class: CasefileService
    module_path: src.casefileservice.service
    method_name: delete_casefile
    request_model: DeleteCasefileRequest
    response_model: DeleteCasefileResponse
    models_module: src.pydantic_models.operations.casefile_ops
    
    request_mapping:
      casefile_id: "{{ casefile_id }}"
      confirm_deletion: "{{ confirm_deletion }}"
    
    response_mapping: |
      # Extract deletion confirmation
      result = {
          "casefile_id": response.payload.casefile_id,
          "deleted": response.payload.deleted,
          "deleted_at": response.payload.deleted_at.isoformat() if response.payload.deleted_at else None,
          "status": response.status.value,
          "execution_time_ms": response.metadata.get("execution_time_ms")
      }
    
    retry_policy:
      max_attempts: 1
      backoff_seconds: 0

returns:
  type: object
  description: Deletion confirmation
  properties:
    casefile_id:
      type: string
      description: Unique identifier of the deleted casefile
    deleted:
      type: boolean
      description: Confirmation that casefile was deleted
    deleted_at:
      type: string
      description: ISO 8601 timestamp of deletion
    status:
      type: string
      description: Request execution status
    execution_time_ms:
      type: number
      description: Execution time in milliseconds
  required:
    - casefile_id
    - deleted
    - status

audit_events:
  success_event: casefile_deleted
  failure_event: casefile_deletion_failed
  log_response_fields:
    - casefile_id
    - deleted
    - deleted_at
  redact_fields: []
  emit_casefile_event: true

examples:
  - description: Delete casefile with confirmation
    context:
      session:
        user_id: user_123
        session_id: session_456
        casefile_id: cf_abc123
      permissions:
        - casefiles:delete
    input:
      casefile_id: "cf_abc123"
      confirm_deletion: true
    expected_output:
      casefile_id: "cf_abc123"
      deleted: true
      status: "COMPLETED"
    expect_casefile_changes: true

error_scenarios:
  - description: Casefile not found
    input:
      casefile_id: "cf_nonexistent"
      confirm_deletion: true
    expected_error:
      type: NotFoundError
      message: "Casefile not found: cf_nonexistent"

  - description: Missing delete permission
    input:
      casefile_id: "cf_abc123"
      confirm_deletion: true
    expected_error:
      type: PermissionError
      message: "User lacks required permission: casefiles:delete"

  - description: User not owner
    input:
      casefile_id: "cf_abc123"
      confirm_deletion: true
    expected_error:
      type: PermissionError
      message: "Only casefile owner can delete. Required permission level: owner"

  - description: Missing confirmation flag
    input:
      casefile_id: "cf_abc123"
      confirm_deletion: false
    expected_error:
      type: ValidationError
      message: "confirm_deletion must be true to proceed with deletion"

  - description: No confirmation provided
    input:
      casefile_id: "cf_abc123"
    expected_error:
      type: ValidationError
      message: "confirm_deletion is required"

documentation:
  summary: |
    Permanently deletes a casefile and all associated data including workspace
    integrations (Gmail, Drive, Sheets), sessions, and audit trail.
    
    WARNING: This operation is IRREVERSIBLE
    
    Required permission: casefiles:delete
    Required: User must be the casefile owner
    Required: confirm_deletion flag must be explicitly set to true
    
    Deletion triggers:
    - Removal of all casefile metadata
    - Deletion of workspace integration data (Gmail/Drive/Sheets)
    - Archival of audit events (not deleted, for compliance)
    - Unlinking of all associated tool sessions
    
    Best practice: Consider archiving casefiles instead of deletion for
    data retention and compliance requirements.
  
  changelog:
    - version: "1.0.0"
      date: "2025-10-06"
      notes: "Initial stable release, mapped to CasefileService.delete_casefile"
