# Test tool demonstrating DTO inheritance from method definition
# This tool inherits ALL parameters, business rules, and models from create_casefile method
# No manual duplication required!

name: create_casefile_inherited
display_name: Create Casefile (Inherited)
description: Create a new casefile using automatic DTO inheritance from method definition
category: workspace
version: "1.0.0"
tags:
  - casefile
  - inheritance
  - test

metadata:
  source_method: create_casefile
  service: CasefileService
  generated_from: methods_inventory_v1.yaml
  inheritance_test: true

classification:
  domain: workspace
  subdomain: casefile
  capability: create
  complexity: atomic
  maturity: experimental
  integration_tier: internal

# NOTE: No manual parameters defined - inherited from method!
# NOTE: No manual business_rules defined - inherited from method!

session_policies:
  requires_active_session: true
  allow_new_session: false
  allow_session_resume: true
  session_event_type: request
  log_request_payload: true
  log_full_response: true

casefile_policies:
  requires_casefile: false
  allowed_casefile_states:
    - active
  create_if_missing: false
  enforce_access_control: true
  audit_casefile_changes: true

# INHERITED: parameters automatically populated from create_casefile method
# INHERITED: business_rules automatically populated from create_casefile method

implementation:
  type: api_call
  api_call:
    method_name: create_casefile
    # All other fields inherited from method metadata
    
    request_mapping:
      # Map inherited tool parameters to method request
      title: "{{ title }}"
      description: "{{ description }}"
      tags: "{{ tags }}"
      metadata: "{{ metadata }}"
    
    response_mapping: |
      # Extract casefile_id and created_at from response payload
      result = {
          "casefile_id": response.payload.casefile_id,
          "title": response.payload.title,
          "created_at": response.payload.created_at.isoformat() if response.payload.created_at else None,
          "owner_user_id": response.payload.owner_user_id,
          "status": response.status.value,
          "execution_time_ms": response.metadata.get("execution_time_ms"),
          "inheritance_test": True
      }

returns:
  type: object
  description: Created casefile details with inheritance test flag
  properties:
    casefile_id:
      type: string
      description: Unique identifier for the created casefile
    title:
      type: string
      description: Title of the casefile
    created_at:
      type: string
      description: ISO 8601 timestamp of creation
    owner_user_id:
      type: string
      description: User ID of the casefile owner
    status:
      type: string
      description: Request execution status (COMPLETED/FAILED)
    execution_time_ms:
      type: number
      description: Time taken to execute the request in milliseconds
    inheritance_test:
      type: boolean
      description: Flag indicating this result came from inherited DTO tool
  required:
    - casefile_id
    - title
    - owner_user_id
    - status
    - inheritance_test

audit_events:
  success_event: casefile_created_inherited
  failure_event: casefile_creation_inherited_failed
  log_response_fields:
    - casefile_id
    - title
    - owner_user_id
    - inheritance_test
  redact_fields: []
  emit_casefile_event: true

examples:
  - description: Create basic casefile with inherited parameters
    context:
      session:
        user_id: user_123
        session_id: session_456
      permissions:
        - casefiles:write
    input:
      title: "Inherited Casefile Test"
    expected_output:
      casefile_id: "cf_inherit_001"
      title: "Inherited Casefile Test"
      status: "COMPLETED"
      inheritance_test: true
    expect_casefile_changes: true

error_scenarios:
  - description: Missing required permission (inherited from method)
    input:
      title: "Test Casefile"
    expected_error:
      type: PermissionError
      message: "User lacks required permission: casefiles:write"

documentation:
  summary: |
    Test tool demonstrating automatic DTO inheritance from method definitions.
    
    This tool inherits:
    - Parameters from create_casefile method
    - Business rules (permissions, timeouts) from create_casefile method  
    - Request/Response models from create_casefile method
    
    No manual duplication required - the ToolFactory automatically populates
    all inherited fields from the MANAGED_METHODS registry.
  
  changelog:
    - version: "1.0.0"
      date: "2025-10-07"
      notes: "Initial inheritance test tool, demonstrates DTO inheritance from methods"

# Test scenarios integrated into tool YAML
test_scenarios:
  # Happy path - everything works
  happy_paths:
    - name: "basic_create"
      description: "Create casefile with minimal valid inputs"
      environment: "valid_user_session"
      input:
        title: "Test Casefile"
      expected:
        status: "COMPLETED"
        has_casefile_id: true
        execution_time_under: 1000
    
    - name: "create_with_full_params"
      description: "Create casefile with all parameters"
      environment: "valid_user_session"
      input:
        title: "Full Test Casefile"
        description: "Complete parameter test"
        tags: ["test", "full"]
      expected:
        status: "COMPLETED"
        title: "Full Test Casefile"
        tags_contain: ["test", "full"]
  
  # Unhappy paths - various failure scenarios
  unhappy_paths:
    - name: "missing_title"
      description: "Fail when required title is missing"
      environment: "valid_user_session"
      input: {}  # Empty input
      expected:
        status: "FAILED"
        error_type: "ValidationError"
        error_contains: "title"
    
    - name: "insufficient_permissions"
      description: "Fail when user lacks write permission"
      environment: "read_only_user"
      input:
        title: "Should Fail"
      expected:
        status: "FAILED"
        error_type: "PermissionError"
        error_contains: "casefiles:write"
    
    - name: "expired_session"
      description: "Fail with expired authentication"
      environment: "expired_session_user"
      input:
        title: "Should Fail"
      expected:
        status: "FAILED"
        error_type: "AuthenticationError"
        error_contains: "expired"
    
    - name: "invalid_session"
      description: "Fail with non-existent session"
      environment: "invalid_session_user"
      input:
        title: "Should Fail"
      expected:
        status: "FAILED"
        error_type: "SessionError"
        error_contains: "not found"

# Environment fixtures for testing
test_environments:
  valid_user_session:
    user_id: "test_user_123"
    session_id: "test_session_456"
    permissions: ["casefiles:write", "casefiles:read", "casefiles:delete"]
    session_valid: true
    token_valid: true
    
  read_only_user:
    user_id: "readonly_user_789"
    session_id: "readonly_session_999"
    permissions: ["casefiles:read"]  # Missing write permission
    session_valid: true
    token_valid: true
    
  expired_session_user:
    user_id: "test_user_123"
    session_id: "expired_session_000"
    permissions: ["casefiles:write"]
    session_valid: false  # Session expired
    token_valid: false
    
  invalid_session_user:
    user_id: "test_user_123"
    session_id: "nonexistent_session_xxx"
    permissions: ["casefiles:write"]
    session_valid: false  # Session doesn't exist
    token_valid: true
